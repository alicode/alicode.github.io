<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Nginx location  匹配原則</title>
    <url>/2017/03/12/2017-03-12_Nginx-Location-Matching/</url>
    <content><![CDATA[<h1 id="Nginx-location-匹配原則"><a href="#Nginx-location-匹配原則" class="headerlink" title="Nginx location  匹配原則"></a>Nginx location  匹配原則</h1><h2 id="語法格式"><a href="#語法格式" class="headerlink" title="語法格式"></a>語法格式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">...</span><br><span class="line">    server&#123;</span><br><span class="line">         location  [ &#x3D; | ~ | ~* | ^~ | @ ] &#x2F;uri&#x2F; &#123;</span><br><span class="line">         ......</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="location-優先順序比對原則-重要"><a href="#location-優先順序比對原則-重要" class="headerlink" title="location 優先順序比對原則 (重要!!!)"></a>location 優先順序比對原則 (重要!!!)</h2><ul>
<li>“=” &gt; “^<del>“ &gt; “</del>“ &gt; “/uri/“   &gt; “/“  (location 的 前綴)</li>
<li>其中 “=” , “^~” , “@”  和  /uri/ (無任何前綴) 都是屬於 一般 location(也就是文字字串)</li>
<li>其中  ~  , ~*  是屬於 正規表示法的 location</li>
<li>location <strong>會先匹配文字字串 ,再匹配正規表示法</strong></li>
<li>文字字串 以匹配<strong>最長字串為原則</strong>, 文字字串沒有位置的先後順序。</li>
<li>正規表示法 有先後順序</li>
</ul>
<h3 id="“-”"><a href="#“-”" class="headerlink" title="“=”"></a>“=”</h3><ul>
<li>嚴格精確比對</li>
<li>匹配之後, 即終止後面的location 比對</li>
<li>文字字串比對</li>
</ul>
<h3 id="“-”-1"><a href="#“-”-1" class="headerlink" title="“^~”"></a>“^~”</h3><ul>
<li>文字字串比對</li>
<li>匹配之後, 即終止後面的location 比對,其實還有另一種含意 (^ 表示「非」，~ 表示「正規表示法」，字符意思是：不要繼續匹配正規表示法)</li>
<li>區分大小寫</li>
<li>不會做URL encode</li>
</ul>
<h3 id="“-”-2"><a href="#“-”-2" class="headerlink" title="“~”"></a>“~”</h3><ul>
<li>正規表示法比對</li>
<li>區分大小寫</li>
</ul>
<h3 id="“-”-3"><a href="#“-”-3" class="headerlink" title="“~*”"></a>“~*”</h3><ul>
<li>正規表示法比對</li>
<li>不區分大小寫</li>
</ul>
<h2 id="location-LAB-實踐演練說明"><a href="#location-LAB-實踐演練說明" class="headerlink" title="location LAB 實踐演練說明"></a>location LAB 實踐演練說明</h2><h3 id="“-“-““-優先順序"><a href="#“-“-““-優先順序" class="headerlink" title="“^“   ““   優先順序"></a>“^<del>“   “</del>“   優先順序</h3><ul>
<li>Nginx 設定檔<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost 172.17.0.*;</span><br><span class="line">    root &#x2F;var&#x2F;www&#x2F;html;</span><br><span class="line">    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;localhost-access.log  main;</span><br><span class="line">    error_log   &#x2F;var&#x2F;log&#x2F;nginx&#x2F;localhost-error.log;</span><br><span class="line"></span><br><span class="line">    location ~ &#x2F;test&#x2F; &#123;</span><br><span class="line">        echo &quot;A&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    location ^~ &#x2F;test &#123;</span><br><span class="line">        echo &quot;B&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li> 測試及說明<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl 172.17.0.2&#x2F;test&#x2F;    &#x3D;&#x3D;&gt; 會return  B</span><br><span class="line">按照location 匹配原則;先執行文字字串的比對,再比對正規表示法。</span><br><span class="line">這邊找到 &quot;^~&quot; 比對文字字串,因 &quot;^~&quot; 特性比對到,就終止後面 正規表示法的比對。</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="“-”-“-“-““-優先順序"><a href="#“-”-“-“-““-優先順序" class="headerlink" title="“=”  “^“  ““  優先順序"></a>“=”  “^<del>“  “</del>“  優先順序</h3><ul>
<li>Nginx 設定檔<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">...</span><br><span class="line">    location ~ &#x2F;test&#x2F; &#123;</span><br><span class="line">        echo &quot;A&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    location ^~ &#x2F;test &#123;</span><br><span class="line">        echo &quot;B&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    location  &#x3D;&#x2F;test&#123;</span><br><span class="line">        echo  &quot;C&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>測試和說明<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl 172.17.0.2&#x2F;test&#x2F;  &#x3D;&#x3D;&gt; return C</span><br><span class="line">按照location 匹配原則;這邊找到 &quot;&#x3D;&quot; 比對文字字串,因 &quot;&#x3D;&quot; 精確比對到,就終止後面 正規表示法的比對。</span><br></pre></td></tr></table></figure>
<h3 id="“-”-正規表示法-有位置執行順序"><a href="#“-”-正規表示法-有位置執行順序" class="headerlink" title="“~”  正規表示法 有位置執行順序"></a>“~”  正規表示法 有位置執行順序</h3></li>
<li>Nginx 設定檔<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">....</span><br><span class="line">    location ~ ^&#x2F;test&#x2F;.*\.(html|htm|jpg|gif)$ &#123;</span><br><span class="line">        echo &quot;A&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ ^&#x2F;test&#x2F;.*\.(html|htm|jpg|gif|png)$ &#123;</span><br><span class="line">        echo &quot;B&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>測試及說明<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl 172.17.0.2&#x2F;test&#x2F;123.html   &#x3D;&#x3D;&gt; A</span><br><span class="line">這邊找不到文字字串比對,再以正規表示法比對, 第一筆location 比對到就終止後面正規表示法的執行。</span><br><span class="line"></span><br><span class="line">curl 172.17.0.2&#x2F;test&#x2F;123.jpg   &#x3D;&#x3D;&gt; A</span><br><span class="line">這邊找不到文字字串比對,再以正規表示法比對, 第一筆location 比對到就終止後面正規表示法的執行。</span><br><span class="line"></span><br><span class="line">curl 172.17.0.2&#x2F;test&#x2F;123.png  &#x3D;&#x3D;&gt; B</span><br><span class="line">這邊找不到文字字串比對,再以正規表示法比對, 第一筆location 沒有比對到,再繼續 第二筆正規表示法的比對,比對到就終止後面正規表示法的執行。</span><br></pre></td></tr></table></figure>
<h3 id="uri-優先順序"><a href="#uri-優先順序" class="headerlink" title="/uri/  ~ 優先順序"></a>/uri/  ~ 優先順序</h3></li>
<li>nginx 設定檔<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">....</span><br><span class="line">   location    &#x2F;test&#x2F;123.png &#123;</span><br><span class="line">        echo &quot;C&quot;;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   location ~ ^&#x2F;test&#x2F;.*\.(html|htm|jpg|gif)$ &#123;</span><br><span class="line">        echo &quot;Test A&quot;;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   location ~ \.(html|png)$ &#123;</span><br><span class="line">        echo &quot;B&quot;;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   location ~ ^&#x2F;test&#x2F;.*\.(html|htm|jpg|gif|png)$ &#123;</span><br><span class="line">        echo &quot;Test B&quot;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>測試及說明<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;172.17.0.2&#x2F;test&#x2F;123.png  &#x3D;&#x3D;&#x3D;&gt;  B</span><br><span class="line">以文字字串比對 匹配到 第一筆location ,再以 正規表示法比對 匹配第三筆 location ,就終止後面的比對。</span><br><span class="line"></span><br><span class="line">若將第三筆 location mark 起來 &quot;#location ~ \.(html|png)$&quot; 測試看看; curl http:&#x2F;&#x2F;172.17.0.2&#x2F;test&#x2F;123.png &#x3D;&#x3D;&gt; Test B</span><br><span class="line">以文字字串比對 匹配到 第一筆location ,再以 正規表示法比對 匹配第四筆location,就終止後面的比對。</span><br><span class="line"></span><br><span class="line">將剛才mark 第三筆 location拿掉。測試 </span><br><span class="line">curl http:&#x2F;&#x2F;172.17.0.2&#x2F;123.html  &#x3D;&#x3D;&gt; B</span><br><span class="line"> 以文字字串比對 沒匹配到,再以 正規表示法比對匹配第三筆 location ,就終止後面的比對。</span><br><span class="line"></span><br><span class="line">curl http:&#x2F;&#x2F;172.17.0.2&#x2F;test&#x2F;123.html  &#x3D;&#x3D;&gt; Test A</span><br><span class="line">以文字字串比對,沒匹配到,再以正規表示法比對,匹配第二筆 location,就終止後面的比對。</span><br></pre></td></tr></table></figure>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2></li>
<li><a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#location">官網 NGINX- location</a></li>
<li><a href="http://freehat.blog.51cto.com/1239536/1610902">51Cto - nginx location 規則優先級</a></li>
<li><a href="http://eyesmore.iteye.com/blog/1141660">Nginx 關於 location 的匹配規則詳解</a></li>
<li><a href="https://smalltowntechblog.com/2014/10/25/nginx-location-regex%E7%AD%86%E8%A8%98/">Nginx Location REGEX 比對語法和設定</a></li>
<li><a href="http://seanlook.com/2015/05/17/nginx-location-rewrite/">nginx配置location總結及rewrite規則寫法 </a></li>
</ul>
]]></content>
      <tags>
        <tag>NGINX</tag>
      </tags>
  </entry>
  <entry>
    <title>使用ngrok突破防火牆或NAT限制</title>
    <url>/2017/10/04/2017-10-04_ngrok/</url>
    <content><![CDATA[<h1 id="使用ngrok突破防火牆或NAT限制"><a href="#使用ngrok突破防火牆或NAT限制" class="headerlink" title="使用ngrok突破防火牆或NAT限制"></a>使用ngrok突破防火牆或NAT限制</h1><ul>
<li><a href="#depolymap">架構圖</a></li>
<li><a href="#ngrokd">自建ngrok服務器</a></li>
<li><a href="#ngrokdstart">在Server端啟動ngrokd-Linux</a></li>
<li><a href="#ngrokstart">在Client端ngrok-Linux</a></li>
<li><a href="#ngrokstartwin">在Client端ngrok-Windows</a></li>
<li><a href="#arduinoinfo">參考資料</a><h2 id="depolymap">架構圖</h2>
圖中遠端使用者若想連線到ClientAA,傳統作法在Router或防火牆上設定NAT之類的。現在ClientAA 先與 ngrokd伺服器建立一個通道,遠端使者就可以透過這個通道與ClientAA通訊。</li>
</ul>
<p><img src="https://i.imgur.com/xXxibn2.jpg" alt="ngrok架構圖"></p>
<h2 id="ngrokd">自建ngrok服務器</h2>
###  編譯 ngrokd (Server)  , ngrok (Client)
- 下載 ngrok 原始碼
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;src&#x2F;</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;inconshreveable&#x2F;ngrok</span><br></pre></td></tr></table></figure>
- 使用openssl 建立 SSL 憑證(自簽)
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl genrsa -out rootCA.key 2048</span><br><span class="line">openssl req -new -x509 -nodes -key rootCA.key -days 10000 -subj <span class="string">&quot;/CN=ngrok.aligogo.pw&quot;</span> -out rootCA.pem</span><br><span class="line">openssl genrsa -out server.key 2048</span><br><span class="line">openssl req -new -key server.key -subj <span class="string">&quot;/CN=ngrok.aligogo.pw&quot;</span> -out server.csr</span><br><span class="line">openssl x509 -req -<span class="keyword">in</span> server.csr -CA rootCA.pem -CAkey rootCA.key  -CAcreateserial -days 10000 -out server.crt</span><br></pre></td></tr></table></figure>
- 分別複製 憑證及key到 此目錄下的server及client
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp -p rootCA.pem   assets/client/tls/ngrokroot.crt</span><br><span class="line">cp -p server.key  assets/server/tls/snakeoil.key</span><br><span class="line">cp -p server.crt assets/server/tls/snakeoil.crt</span><br></pre></td></tr></table></figure>

<ul>
<li>編譯。 編譯完在 /usr/src/ngrok/bin/<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make release-server</span><br><span class="line">make release-client</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意: 編譯 ARM 客戶端 (手機用)<br>GOOS=linux GOARCH=arm make release-client<br>編譯 Mac 客戶端 (Macbook用)<br>GOOS=darwin GOARCH=amd64 make release-client<br>編譯 windows 客戶端 (電腦用)<br>GOOS=windows GOARCH=amd64 make release-client<br>或是<br>GOOS=windows GOARCH=386  make release-client</p>
</blockquote>
</li>
</ul>
<h2 id="ngrokdstart">在Server端BB 啟動(Centos6_x86_64)</h2>
###  ngrokd
- 啟動ngrokd。指定 httpAddr、httpsAddr 分別是 ngrok 用來轉發 http、https 服務的端口

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./ngrokd -domain=<span class="string">&quot;ngrok.aligogo.pw&quot;</span> -httpAddr=<span class="string">&quot;:8081&quot;</span> -httpsAddr=<span class="string">&quot;:8082&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li> 另外,ngrokd 預設還會開一個 4443 port 用來跟客戶端通訊 (可以使用 此參數指定 -tunnelAddr=”:xxx”),<br>將 tcp 8081 ,8082 ,4443, 22222 加入防火牆</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -I INPUT 5 -p tcp --dport 4443 -j ACCEPT</span><br><span class="line">iptables -I INPUT 5 -p tcp --dport 8081 -j ACCEPT</span><br><span class="line">iptables -I INPUT 5 -p tcp --dport 8082 -j ACCEPT</span><br><span class="line">iptables -I INPUT 5 -p tcp --dport 22222 -j ACCEPT</span><br></pre></td></tr></table></figure>
<h2 id="ngrokstart">在Client端 AA (Centos6_x86_64) 啟動ngrok去連接 ngrok.aligogo.pw:4443</h2>
- 目標: 讓外部能連接內部 sshd
- 在 Client AA 先確定是否有開啟 sshd

<ul>
<li>與 ngrok 同目錄建立 ngrok.cfg<br>(Server 防火牆要開 port (ex. 58800 (供RDP轉送)、22222 (供SSH轉送)))<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server_addr:</span> <span class="string">&quot;ngrok.aligogo.pw:4443&quot;</span></span><br><span class="line"><span class="attr">trust_host_root_certs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">tunnels:</span></span><br><span class="line">  <span class="attr">rdp:</span></span><br><span class="line">    <span class="attr">remote_port:</span> <span class="number">58800</span></span><br><span class="line">    <span class="attr">proto:</span></span><br><span class="line">      <span class="attr">tcp:</span> <span class="number">3389</span></span><br><span class="line">  <span class="attr">ssh:</span></span><br><span class="line">    <span class="attr">remote_port:</span> <span class="number">22222</span></span><br><span class="line">    <span class="attr">proto:</span></span><br><span class="line">      <span class="attr">tcp:</span> <span class="number">22</span></span><br></pre></td></tr></table></figure></li>
<li>啟動 ngrok</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;ngrok  -config&#x3D;.&#x2F;ngrok.cfg start ssh</span><br></pre></td></tr></table></figure>

<ul>
<li>換顯示以下訊息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngrok                                                                                            (Ctrl+C to quit)</span><br><span class="line">                                                                                                                 </span><br><span class="line">Tunnel Status                 online                                                                             </span><br><span class="line">Version                       1.7&#x2F;1.7                                                                            </span><br><span class="line">Forwarding                    tcp:&#x2F;&#x2F;ngrok.aligogo.pw:22222 -&gt; 127.0.0.1:22                                       </span><br><span class="line">Web Interface                 127.0.0.1:4040                                                                     </span><br><span class="line"># Conn                        0                                                                                  </span><br><span class="line">Avg Conn Time                 0.00ms </span><br></pre></td></tr></table></figure>

<ul>
<li>遠端測試機 是否可以連接 Client 端 AA</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -p 22222 ngrok.aligogo.pw</span><br></pre></td></tr></table></figure>

<h2 id="ngrokstartwin">在Client端CC (Windows 2003) 啟動ngrok 去連接 ngrok.aligogo.pw:4443</h2>
- 目標: 讓外部能連接內部  RDP 3389
- 因為是 Windows ngrok 需要重新編譯

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GOOS&#x3D;windows GOARCH&#x3D;386  make release-client  (for 32位元電腦)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GOOS&#x3D;windows GOARCH&#x3D;amd64 make release-client (for 64位元電腦)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>與 ngrok 同目錄建立 ngrok.cfg<br>(Server 防火牆要開 22222 (供RDP轉送))</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server_addr: &quot;ngrok.aligogo.pw:4443&quot;</span><br><span class="line">trust_host_root_certs: false</span><br><span class="line">tunnels:</span><br><span class="line">  rdp:</span><br><span class="line">    remote_port: 22222</span><br><span class="line">    proto:</span><br><span class="line">      tcp: 3389</span><br></pre></td></tr></table></figure></li>
<li><p>啟動 ngrok</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngrok.exe -config&#x3D;ngrok.cfg  start rdp</span><br></pre></td></tr></table></figure>


<h2 id="arduinoinfo">參考資料</h2>

<ul>
<li><a href="https://ngrok.com/docs#expose">ngrok官方</a></li>
<li><a href="https://blog-gocreating.rhcloud.com/2015/04/24/ngrok-%E8%AE%93localhost%E7%84%A1%E7%B8%AB%E6%8E%A5%E8%BB%8Cinternet%E7%9A%84%E5%A5%BD%E5%B7%A5%E5%85%B7/">ngrok讓localhost無縫接軌internet的好工具</a></li>
<li><a href="http://fu7771.blogspot.tw/2017/08/ngrok-server.html">自架 ngrok server (穿透內網)</a></li>
<li><a href="https://github.com/inconshreveable/ngrok">ngrok-GitHub</a></li>
<li><a href="https://imququ.com/post/self-hosted-ngrokd.html">搭建 ngrok 服務實現內網穿透</a></li>
<li><a href="https://minecraft-zh.gamepedia.com/index.php?title=%E6%95%99%E7%A8%8B/%E4%BD%BF%E7%94%A8ngrok%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8&variant=zh-tw">教程/使用ngrok搭建伺服器</a></li>
</ul>
]]></content>
      <tags>
        <tag>資安</tag>
        <tag>Reverse-Tunnel</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-Simple-parallel</title>
    <url>/2018/04/01/Python-Simple-parallel/</url>
    <content><![CDATA[<h2 id="Python-multiprocessing"><a href="#Python-multiprocessing" class="headerlink" title="Python - multiprocessing"></a>Python - multiprocessing</h2><p>大部分程式都是由上到下依序執行,若一個程式花費需要5秒,批示執行8次,理論是應該須40秒時間。現在CPU都是多核心,假設有一個8 core的CPU,將執行8次花費5秒的程式,分配到每個核心並行執行,理論上應該只要5秒就可完成工作。Python 標準函式庫 就有 multiprocessing 可達到此目的。</p>
<h2 id="Python-Demo-1"><a href="#Python-Demo-1" class="headerlink" title="Python Demo 1"></a>Python Demo 1</h2><p>1.ping 5次 (循序方式,於雙核CPU) ;測出約8秒</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python                                                                                                                 </span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">def job1(url):</span><br><span class="line">    tmpstr&#x3D;&quot;ping -c 5  &quot;+str(url)</span><br><span class="line">    os.system(tmpstr)</span><br><span class="line"></span><br><span class="line">if __name__&#x3D;&#x3D;&#39;__main__&#39;:</span><br><span class="line">    job1(&quot;8.8.8.8&quot;)</span><br><span class="line">    job1(&quot;8.8.4.4&quot;)</span><br></pre></td></tr></table></figure>


<p>2.ping 5次 (<strong>並行方式</strong>,於雙核CPU);測出約4秒</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python                                                                                                                 </span><br><span class="line">import multiprocessing as mp</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">def job1(url):</span><br><span class="line">    tmpstr&#x3D;&quot;ping -c 5  &quot;+str(url)</span><br><span class="line">    os.system(tmpstr)</span><br><span class="line"></span><br><span class="line">if __name__&#x3D;&#x3D;&#39;__main__&#39;:</span><br><span class="line">    p1&#x3D;mp.Process(target&#x3D;job1,args&#x3D;(&quot;8.8.8.8&quot;,))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2&#x3D;mp.Process(target&#x3D;job1,args&#x3D;(&quot;8.8.4.4&quot;,))</span><br><span class="line">    p2.start()</span><br></pre></td></tr></table></figure>

<h2 id="Python-Demo-2-另一種Pool寫法"><a href="#Python-Demo-2-另一種Pool寫法" class="headerlink" title="Python Demo 2 ,另一種Pool寫法"></a>Python Demo 2 ,另一種Pool寫法</h2><p>1.一個工作睡3秒,執行5次。(循序方式,於雙核CPU) ;測出約15秒</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python                                                                                                                 </span><br><span class="line">from multiprocessing import Pool</span><br><span class="line">from time import sleep</span><br><span class="line"></span><br><span class="line">def task(argss):</span><br><span class="line">    print(str(argss) +&quot; start ... sleep&quot;)</span><br><span class="line">    sleep(3)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    for i in range(5):</span><br><span class="line">        task(i)</span><br></pre></td></tr></table></figure>

<p>2.一個工作睡3秒,執行5次。(<strong>並行方式</strong>,於雙核CPU) ;測出約9秒</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">from multiprocessing import Pool</span><br><span class="line">from time import sleep</span><br><span class="line">                                                                                                                                    </span><br><span class="line">def task(argss):</span><br><span class="line">    print(str(argss) +&quot; start ... sleep&quot;)</span><br><span class="line">    sleep(3)</span><br><span class="line">    </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    p&#x3D;Pool(2)</span><br><span class="line">    for i in range(5):</span><br><span class="line">        p.apply_async(task, args&#x3D;(i,))</span><br><span class="line">        </span><br><span class="line">    print(&#39;Waiting for all subprocesses..&#39;)</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    print(&#39;All Subprocess done ..&#39;)</span><br></pre></td></tr></table></figure>

<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://docs.python.org.tw/3/library/multiprocessing.html#module-multiprocessing">Python標準庫_multiprocessing</a></li>
<li><a href="filesystem:chrome-extension://oegnpmiddfljlloiklpkeelagaeejfai/temporary/9c5cbb04-be0a-4f65-b4c5-61b9bd7cd4c6/1487326368864_729/index.htm">Multiprocessing with Python</a></li>
<li><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431927781401bb47ccf187b24c3b955157bb12c5882d000">廖雪峰-多進程</a></li>
<li><a href="http://www.cnblogs.com/vamei/archive/2012/10/12/2721484.html#">Python標準庫10 多進程初步 (multiprocessing包)</a></li>
</ul>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Browser自動化測試工具Selenium</title>
    <url>/2017/10/21/Browser%E8%87%AA%E5%8B%95%E5%8C%96%E6%B8%AC%E8%A9%A6%E5%B7%A5%E5%85%B7_Selenium_%E5%88%9D%E9%AB%94%E9%A9%97/</url>
    <content><![CDATA[<h1 id="Browser自動化測試工具Selenium-Selenium-初體驗"><a href="#Browser自動化測試工具Selenium-Selenium-初體驗" class="headerlink" title="Browser自動化測試工具Selenium - Selenium 初體驗"></a>Browser自動化測試工具Selenium - Selenium 初體驗</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 前幾天與Software部門在進行測試網站某個功能性(每秒瀏灠一次網頁,共進行100次,查看第幾次開始得到http status code:403),因為我們部門長期都是使用Command-Line工作,因此為了方便用Shell Script簡單寫一個測試程式,測試結果與software部們不相同,了解之後,才知道他們是使用Browser 用手點方式測試。為了雙方測試環境一致性及客觀地顯示測試數據,本人有一個想法是否有支援程序化工具來控制Firefox或Chrome,經Google之後,很多網路上都推薦使用 <strong>Selenium</strong>,這項自動化測試工具。</p>
<h2 id="建置selenium環境"><a href="#建置selenium環境" class="headerlink" title="建置selenium環境"></a>建置selenium環境</h2><ul>
<li>這邊範例使用 Windows 系統(win7 或 Win10 都可)</li>
<li>這邊範例使用Python語言,Windows 預設沒有安裝Python,<a href="https://www.python.org/downloads/release/python-363/">需要下載Python</a>,選擇對應平台(x86 或 x86_64),下載後,執行下一步下一步的安裝方式,這邊就不展示。</li>
<li>開啟命令提示字元, 打上 py 或 python,有跑出類似以下畫面表示python 安裝成功。<br><img src="https://i.imgur.com/eQzPen8.png" alt="py_windows"></li>
<li>安裝selenium。預設python 3 已有<strong>pip</strong>安裝python 第三方套件管理程式。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure></li>
<li>分別下載Firefox及Chrome的webdriver,為了方便使用,下載完放置在c:\<ul>
<li>Chrome的Webdriver <a href="https://sites.google.com/a/chromium.org/chromedriver/downloads%22target=%22_blank">ChromeDriver - WebDriver for Chrome</a></li>
<li>Firefox的Webdriver <a href="https://github.com/mozilla/geckodriver/releases%22target=%22_blank">Mozilla_geckodriver</a></li>
</ul>
</li>
</ul>
<h2 id="簡單執行自動執行Chrome"><a href="#簡單執行自動執行Chrome" class="headerlink" title="簡單執行自動執行Chrome"></a>簡單執行自動執行Chrome</h2><ul>
<li>chromeDemo.py<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">chrome_path=<span class="string">&quot;c:\chromedriver.exe&quot;</span></span><br><span class="line">web=webdriver.Chrome(chrome_path)</span><br><span class="line">web.set_window_position(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">web.set_window_size(<span class="number">700</span>,<span class="number">700</span>)</span><br><span class="line">web.get(<span class="string">&#x27;http://www.google.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(web.current_url)</span><br><span class="line">time.sleep(<span class="number">15</span>)</span><br><span class="line">web.close()</span><br></pre></td></tr></table></figure></li>
<li>在命令提示字元 執行 chromeDemo.py<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c:\&gt;py chromeDemo.py</span><br></pre></td></tr></table></figure>
<h2 id="簡單執行自動執Firefox"><a href="#簡單執行自動執Firefox" class="headerlink" title="簡單執行自動執Firefox"></a>簡單執行自動執Firefox</h2></li>
<li>firefoxdemo.py<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">Firefox_path=<span class="string">&quot;c:\geckodriver.exe&quot;</span></span><br><span class="line">web=webdriver.Firefox(executable_path=Firefox_path)</span><br><span class="line">web.set_window_position(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">web.set_window_size(<span class="number">700</span>,<span class="number">700</span>)</span><br><span class="line">ActionChains(web).key_down(Keys.F12).key_up(Keys.F12).perform()</span><br><span class="line">web.get(<span class="string">&#x27;http://www.google.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(web.current_url)</span><br><span class="line">time.sleep(<span class="number">15</span>)</span><br><span class="line">web.close()</span><br></pre></td></tr></table></figure></li>
<li>在命令提示字元 執行 firefoxdemo.py<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c:\&gt;py firefoxdemo.py</span><br></pre></td></tr></table></figure>
<h2 id="範例-持續點擊某個網址"><a href="#範例-持續點擊某個網址" class="headerlink" title="範例 - 持續點擊某個網址"></a>範例 - 持續點擊某個網址</h2>以下使用chrome drive 來開啟Chrome Browser,並設定 Proxy相關設定(這邊我的內網有一台proxy： <a href="http://192.168.160.17:8082)之後,每隔1秒持續點擊">http://192.168.160.17:8082)之後,每隔1秒持續點擊</a> <a href="http://ifconfig.io/">ifconfig.io</a><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">PROXY=<span class="string">&#x27;http://192.168.160.17:8082&#x27;</span></span><br><span class="line"></span><br><span class="line">webdriver.DesiredCapabilities.CHROME[<span class="string">&#x27;proxy&#x27;</span>]=&#123;</span><br><span class="line">    <span class="string">&quot;httpProxy&quot;</span>: PROXY,</span><br><span class="line">    <span class="string">&quot;ftpProxy&quot;</span>: PROXY,</span><br><span class="line">    <span class="string">&quot;sslProxy&quot;</span>: PROXY,</span><br><span class="line">    <span class="string">&quot;proxyType&quot;</span>: <span class="string">&quot;MANUAL&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">chrome_path=<span class="string">&quot;./chromedriver.exe&quot;</span></span><br><span class="line"><span class="keyword">with</span> webdriver.Chrome(chrome_path) <span class="keyword">as</span> web:</span><br><span class="line">    web.set_window_position(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    web.set_window_size(<span class="number">700</span>,<span class="number">700</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">      web.get(<span class="string">&#x27;http://ifconfig.io&#x27;</span>)</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;, URL: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i,web.current_url))</span><br><span class="line">      time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h2 id="影片展示自動執行Firefox及Chrome"><a href="#影片展示自動執行Firefox及Chrome" class="headerlink" title="影片展示自動執行Firefox及Chrome"></a>影片展示自動執行Firefox及Chrome</h2></li>
<li><a href="http://goo.gl/27U9PC">for Firefox</a></li>
<li><a href="http://goo.gl/r6i1V7">for Chrome</a><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></li>
<li><a href="http://www.seleniumhq.org/">英文-SeleniumHQ-官方</a></li>
<li><a href="https://www.selenium.dev/documentation/en/webdriver/http_proxies/">英文-Selenium_Http proxies</a></li>
<li><a href="http://selenium-python-zh.readthedocs.io/en/latest/index.html">Selenium with Python中文翻譯文檔</a></li>
<li><a href="http://blog.csdn.net/xie_0723/article/details/51437650">Python Selenium 常用方法總結</a></li>
<li><a href="http://jialin128.pixnet.net/blog/post/114056630-%5Bpython%5D--%E4%BD%BF%E7%94%A8selenium%E5%9C%A8google-chrome%E7%80%8F%E8%A6%BD%E5%99%A8">[Python] 使用Selenium在Google Chrome瀏覽器</a></li>
<li><a href="http://zwindr.blogspot.tw/2016/07/python-selenium.html">[Python] Selenium 教學 </a></li>
<li><a href="http://risker0930.pixnet.net/blog/post/93522422-%E5%9C%A8chrome%E4%B8%8A%E9%9D%A2%E4%BD%BF%E7%94%A8selenium-webdriver">在Chrome上面使用Selenium WebDriver</a></li>
<li><a href="http://pala.tw/python-web-crawler/">Python爬蟲新手筆記</a></li>
</ul>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Selenium</tag>
        <tag>爬蟲</tag>
      </tags>
  </entry>
  <entry>
    <title>First Hexo</title>
    <url>/2021/04/17/First-Hexo/</url>
    <content><![CDATA[<h2 id="Install-nvm"><a href="#Install-nvm" class="headerlink" title="Install nvm"></a>Install nvm</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash</span><br><span class="line"><span class="built_in">command</span> -v nvm</span><br><span class="line"><span class="built_in">which</span> nvm</span><br><span class="line">nvm ls</span><br><span class="line">nvm current</span><br></pre></td></tr></table></figure>
<h2 id="Install-node-by-nvm"><a href="#Install-node-by-nvm" class="headerlink" title="Install node by nvm"></a>Install node by nvm</h2><p>安裝長期支援的版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install --lts</span><br></pre></td></tr></table></figure>
<h2 id="Install-Hexo-by-npm"><a href="#Install-Hexo-by-npm" class="headerlink" title="Install  Hexo by npm"></a>Install  Hexo by npm</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<h2 id="First-Hexo"><a href="#First-Hexo" class="headerlink" title="First Hexo"></a>First Hexo</h2><h3 id="簡單建立一個MyBlog"><a href="#簡單建立一個MyBlog" class="headerlink" title="簡單建立一個MyBlog"></a>簡單建立一個MyBlog</h3><ul>
<li><p>建立一個MyBlog</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br><span class="line">hexo init  MyBlog</span><br></pre></td></tr></table></figure></li>
<li><p>簡單建立一篇文章叫做 First Hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;First-Hexo&quot;</span></span><br></pre></td></tr></table></figure>
<p>會這此目錄下 source/_posts/ 生成 First-Hexo.md</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source&#x2F;_posts&#x2F;First-Hexo.md</span><br></pre></td></tr></table></figure></li>
<li><p>輸出靜態頁面<br>會在此目錄下 MyBlog/public/ 生成html靜態頁面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>
<p>或是使用簡碼</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></li>
<li><p>瀏覽生成頁面<br>hexo 預設自帶web server ; Listen Port: 4000 ; <a href="http://localhost:4000/">http://localhost:4000</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br><span class="line"><span class="comment">###或是使用簡碼也可</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<h3 id="更換theme"><a href="#更換theme" class="headerlink" title="更換theme"></a>更換theme</h3><p>hexo 網路上推薦 <a href="https://github.com/theme-next/hexo-theme-next">NexT</a></p>
</li>
<li><p>install NexT</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> MyBlog</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></li>
<li><p>修正網站設定 - theme<br>搜尋關鍵字 <strong>theme</strong> ,將預設 landscape -&gt; next<br>MyBlog/_config.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">##theme: landscape</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>
<h3 id="有RSS功能"><a href="#有RSS功能" class="headerlink" title="有RSS功能"></a>有RSS功能</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>
<h3 id="發佈到GitPage"><a href="#發佈到GitPage" class="headerlink" title="發佈到GitPage"></a>發佈到GitPage</h3></li>
<li><p>發佈之前, 需要安裝hexo Plugin - <strong>hexo-deployer-git</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git –save</span><br></pre></td></tr></table></figure></li>
<li><p>編輯 _config.yml ,到deploy 區段增加 repo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;Token@github.com&#x2F;&lt;UserName&gt;&#x2F;&lt;UserName&gt;.github.io.git</span><br><span class="line">  ##repo: https:&#x2F;&#x2F;github.com&#x2F;&lt;Username&gt;&#x2F;&lt;UserName&gt;.github.io.git -- old</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2021/08/13 GitHub開始使用新的認證方式(Token,SSH),使用舊有認證會有錯誤訊息<br>remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.<br>remote: Please see <a href="https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/">https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/</a> for more informat</p>
</blockquote>
</li>
<li><p>開始發佈到GitHub</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo deploy</span><br><span class="line"><span class="comment">###或是使用簡碼也可</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><ul>
<li><a href="https://zespia.tw/blog/2012/10/11/hexo-debut/">hexo發源地-Hexo 颯爽登場</a></li>
<li><a href="https://ithelp.ithome.com.tw/users/20119486/ironman/2944">第 12 屆 iT 邦幫忙鐵人賽-試著學 Hexo 系列</a></li>
<li><a href="https://titangene.github.io/article/nvm.html">nvm：安裝、切換不同 Node.js 版本的管理器</a></li>
<li><a href="https://hexo.io/zh-tw/docs/">官網-Hexo Docs</a></li>
<li><a href="https://www.muji.dev/2020/02/16/hexo-github-page/">使用 Hexo 搭配 Github Page 建置自己的部落格</a></li>
<li><a href="https://hackmd.io/@king87515/Sy16ckymU">Git+Hexo-架設個人靜態網站</a></li>
<li><a href="https://myctw.github.io/post/bd72.html">Mac 上改變 Git 認證模式</a></li>
<li><strong>石頭的coding之路-Hexo</strong><ul>
<li><a href="https://isdaniel.github.io/github-hexo-appveyor/">建立自己Blog系列(一) 介紹 Github (hosting) + Hexo (Blog) + Appveyor(CICD)</a></li>
<li><a href="https://isdaniel.github.io/hexo-github-setting/">建立自己Blog系列(二) github Setting</a></li>
<li><a href="https://isdaniel.github.io/hexo-blog-theme/">建立自己Blog系列(三) Hexo next theme 介紹</a></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>基礎2：Flask URL 傳值</title>
    <url>/2018/06/17/base-Flask-app2/</url>
    <content><![CDATA[<h1 id="基礎：Flask-URL-傳值"><a href="#基礎：Flask-URL-傳值" class="headerlink" title="基礎：Flask URL 傳值"></a>基礎：Flask URL 傳值</h1><h2 id="url-傳值範例"><a href="#url-傳值範例" class="headerlink" title="url 傳值範例"></a>url 傳值範例</h2><p>demo2.py</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/home/&lt;id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index2</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;My Home in &#x27;</span>  +  <span class="built_in">id</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>  __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,port=<span class="number">8099</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h2 id="測試執行"><a href="#測試執行" class="headerlink" title="測試執行"></a>測試執行</h2><ul>
<li><p><a href="http://127.0.0.1:8099/home/Taichung">http://127.0.0.1:8099/home/Taichung</a></p>
<p>(回應) My Home in Taichung</p>
</li>
<li><p><a href="http://127.0.0.1:8099/home/Taipei">http://127.0.0.1:8099/home/Taipei</a></p>
<p>(回應) My Home in Taipei</p>
</li>
</ul>
<h2 id="參數類型"><a href="#參數類型" class="headerlink" title="參數類型"></a>參數類型</h2><p>標記的 <id> ,可以指定參數類型</p>
<ul>
<li>語法:<br>&lt;類型:id&gt;</li>
<li>類型:<ul>
<li>string:沒有接受 斜線的文字(預設)</li>
<li>int</li>
<li>float</li>
<li>path: 和預設一樣 ,但接受斜線</li>
<li>uuid</li>
<li>any: 指定多種路徑</li>
</ul>
</li>
</ul>
<h3 id="指定類型範例"><a href="#指定類型範例" class="headerlink" title="指定類型範例"></a>指定類型範例</h3><p>demo2-1.py</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/home/&lt;int:id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index2</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">    test=<span class="number">100</span> + <span class="built_in">id</span></span><br><span class="line">    test=<span class="built_in">str</span>(test)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Google Number: &#x27;</span>  +  test</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&lt;any(Taichung,Taipei,AAA,BBB):lo&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index3</span>(<span class="params">lo</span>):</span></span><br><span class="line">    <span class="keyword">return</span>    <span class="string">&#x27;My Home is in &#x27;</span> +  lo</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>  __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,port=<span class="number">8099</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h3 id="指定類型執行"><a href="#指定類型執行" class="headerlink" title="指定類型執行"></a>指定類型執行</h3><ul>
<li><p><a href="http://127.0.0.1:8099/home/1234">http://127.0.0.1:8099/home/1234</a></p>
<p>(回應) Google Number: 1334</p>
</li>
<li><p><a href="http://127.0.0.1:8099/home/aaa">http://127.0.0.1:8099/home/aaa</a></p>
<p>(回應) 404  Not Found</p>
</li>
<li><p><a href="http://127.0.0.1:8099/Taichung">http://127.0.0.1:8099/Taichung</a></p>
<p>(回應) My Home is in Taichung</p>
</li>
<li><p><a href="http://127.0.0.1:8099/Taipei">http://127.0.0.1:8099/Taipei</a></p>
<p>(回應) My Home is in Taipei</p>
</li>
<li><p><a href="http://127.0.0.1:8099/AAA">http://127.0.0.1:8099/AAA</a></p>
<p>(回應) My Home is in AAA</p>
</li>
<li><p><a href="http://127.0.0.1:8099/BBB">http://127.0.0.1:8099/BBB</a></p>
<p>(回應) My Home is in BBB</p>
</li>
<li><p><a href="http://127.0.0.1:8099/AAABBB">http://127.0.0.1:8099/AAABBB</a><br>(回應) 404  Not Found</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>基礎1：Flask 建立一個app</title>
    <url>/2018/06/17/base-Flask-app1/</url>
    <content><![CDATA[<h1 id="基礎：Flask-建立一個app"><a href="#基礎：Flask-建立一個app" class="headerlink" title="基礎：Flask 建立一個app"></a>基礎：Flask 建立一個app</h1><h2 id="簡單範例-Hello-World"><a href="#簡單範例-Hello-World" class="headerlink" title="簡單範例 Hello World"></a>簡單範例 Hello World</h2><p>demo.py</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&lt;h1&gt;Hello World&lt;/h1&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/home&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index2</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;My Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>  __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,port=<span class="number">8099</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h2 id="啟動"><a href="#啟動" class="headerlink" title="啟動"></a>啟動</h2><p>啟動一個 web 服務, listen 127.0.0.1:8099</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./demo.py</span><br><span class="line">或是 python3 demo.py</span><br></pre></td></tr></table></figure>

<h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>在Browser 測試兩個網址,看看會回應什麼變化。</p>
<ul>
<li><a href="http://127.0.0.1:8099/">http://127.0.0.1:8099</a></li>
<li><a href="http://127.0.0.1:8099/home">http://127.0.0.1:8099/home</a></li>
<li><a href="http://127.0.0.1:8099/home/">http://127.0.0.1:8099/home/</a></li>
</ul>
<h2 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h2><ul>
<li> Flask 類 傳入的參數  ‘<strong>name</strong>‘ ,表示 程式的根目錄</li>
<li> @app.route  裝飾器  將 url  與   視圖函數(View)   def index()  關聯到 app.url_map 屬性上 。處理 url  與 視圖函數的過程稱為路由(route)</li>
<li> app.run 使用 Python 標準函數  BaseHTTPServer.HTTPServer 啟動一個 web 服務。有 host , port , debug 等諸多參數</li>
<li> Flask 使用  唯一URL 。   使用 curl  <a href="http://127.0.0.1:8099/home">http://127.0.0.1:8099/home</a>  (回 http stat code  200)  與  curl  <a href="http://127.0.0.1:8099/home/">http://127.0.0.1:8099/home/</a>   (回http stat code 404)   回應結果不同。</li>
</ul>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/04/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>SSh-Reverse-Tunnel-RDP</title>
    <url>/2019/01/20/SSh-Reverse-Tunnel-RDP/</url>
    <content><![CDATA[<h1 id="使用ssh-Reverse-Tunnel-突破防火牆或NAT限制"><a href="#使用ssh-Reverse-Tunnel-突破防火牆或NAT限制" class="headerlink" title="使用ssh Reverse Tunnel 突破防火牆或NAT限制"></a>使用ssh Reverse Tunnel 突破防火牆或NAT限制</h1><ul>
<li><a href="#depolymap">架構圖</a></li>
<li><a href="#background">背景說明</a></li>
<li><a href="#stepbystep">實作說明</a></li>
<li><a href="#arduinoinfo">參考資料</a><h2 id="depolymap">架構圖</h2>
試想一個情況,公司區網有一部A主機可以對外連線上網都沒問題,可是這部A主機是在防火牆或NAT後端裡面,外部B主機是無法連到這部A主機。若不想在防火牆設定由外部 mapping A主機的話,就可以利用 SSH Reverse Tunnel。</li>
</ul>
<p><img src="https://i.imgur.com/wxn8PHY.jpg" alt="SSh Reverse Tunnel架構圖"></p>
<h2 id="background">背景說明</h2>
- 區域網的 A主機(windows ) 192.168.88.8 , 有開啟RDP(有開啟遠端桌面服務,僅在區域網路使用)
- 外部B主機(Linux,在Google GCP 租用的),35.221.139.139 (Public IP, 配合演示使用的),有開啟SSHD服務
- 本篇主要目的,要從 Google GCP 租用的外部B主機連到區域網路A主機RDP服務

<h2 id="stepbystep">實作說明</h2>
如上圖顯示紫色那一段為第1步,綠色為第2步。

<h3 id="第1步-先在A主機建立與B主機的Reverse-Tunnel連線"><a href="#第1步-先在A主機建立與B主機的Reverse-Tunnel連線" class="headerlink" title="第1步: 先在A主機建立與B主機的Reverse Tunnel連線"></a>第1步: 先在A主機建立與B主機的Reverse Tunnel連線</h3><p>A主機是Windows,用putty ssh 外部B主機</p>
<p><strong>填上外部B主機ip位址</strong><br><img src="https://i.imgur.com/7GwQ1M2.png" alt="填上外部B主機ip位址"></p>
<p><strong>填上Login帳號</strong><br><img src="https://i.imgur.com/WZF1bBO.png" alt="填上Login帳號"><br><strong>此步驟非必要的,此篇登入外部B主機是使用憑證方式</strong><br><img src="https://i.imgur.com/Fjr72mO.png" alt="此步驟非必要的,此篇登入外部B主機是使用憑證方式"><br><strong>最重要!!,設定reverse Tunnel</strong></p>
<ul>
<li>Source port:<strong>3389</strong>     表示給外部連線用的</li>
<li>Destination : <strong>127.0.0.1:3389</strong> 表示連線A主機內部服務<br><img src="https://i.imgur.com/gnP20m9.png" alt="此步驟非必要的,此篇登入外部B主機是使用憑證方式"></li>
</ul>
<p><strong>完成連線</strong></p>
<ul>
<li>表示已連線登入到外部B主機</li>
<li>紅色圈起來表示 上圖Source port部份<br><img src="https://i.imgur.com/KXxk0ql.png" alt="完成連線"></li>
</ul>
<h3 id="第2步-從B主機連線到內網A主機"><a href="#第2步-從B主機連線到內網A主機" class="headerlink" title="第2步: 從B主機連線到內網A主機"></a>第2步: 從B主機連線到內網A主機</h3><p><strong>使用freerdp這個套件連線 內網A主機rdp服務</strong><br><img src="https://i.imgur.com/7PUOZqq.png" alt="freerdp_connection"><br><strong>rdp Login</strong><br><img src="https://i.imgur.com/zz4uEA2.png" alt="rdp Login"><br><strong>用RDP 進入內網A主機</strong><br><img src="https://i.imgur.com/wym4YOO.png" alt="RDP A"></p>
<h2 id="arduinoinfo">參考資料</h2>

<ul>
<li><a href="https://newtoypia.blogspot.com/2016/08/reverse-ssh-tunneling.htm">鑿一個反向 ssh 隧道， 對朋友或世界展示筆電或家裡的某個服務</a></li>
<li><a href="https://ez3c.tw/2043">Reverse SSH Tunnel實際運用，搭配auotssh永不斷線，putty建立反向tunnel</a></li>
<li><a href="http://blog.creke.net/722.htm">SSH隧道與端口轉發及內網穿透</a></li>
</ul>
]]></content>
      <tags>
        <tag>資安</tag>
        <tag>Reverse-Tunnel</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>基礎3：Flask Jinja2 模板引擎</title>
    <url>/2018/10/13/base-Flask-template-app3/</url>
    <content><![CDATA[<h1 id="基礎：Flask-Jinja2-模板引擎"><a href="#基礎：Flask-Jinja2-模板引擎" class="headerlink" title="基礎：Flask Jinja2 模板引擎"></a>基礎：Flask Jinja2 模板引擎</h1><h2 id="本範例程式的目錄結構-使用python3-x"><a href="#本範例程式的目錄結構-使用python3-x" class="headerlink" title="本範例程式的目錄結構 (使用python3.x)"></a>本範例程式的目錄結構 (使用python3.x)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── hello.py</span><br><span class="line">└── templates</span><br><span class="line">    ├── base.html</span><br><span class="line">    ├── test2.html</span><br><span class="line">    ├── test.html</span><br><span class="line">    └── user.html</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="在Jinja2-變數的表示"><a href="#在Jinja2-變數的表示" class="headerlink" title="在Jinja2 變數的表示"></a>在Jinja2 變數的表示</h3><ul>
<li>hello.py<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;user.html&#x27;</span>, name=name)</span><br></pre></td></tr></table></figure></li>
<li>user.html<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;&#123; name &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="在Jinja2-變數過濾器"><a href="#在Jinja2-變數過濾器" class="headerlink" title="在Jinja2 變數過濾器"></a>在Jinja2 變數過濾器</h3></li>
<li><a href="http://jinja.pocoo.org/docs/2.10/templates/#builtin-filters%22target=%22_blank">[Jinja2 官方的過濾清單]</a></li>
<li>呈上一的變數的表示, hello.py不變;只更改 <strong>templates/user.html</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>第一個字元大寫,其餘小寫: &#123;&#123; name|capitalize &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>第一個字元大寫: &#123;&#123; name|title &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>全部字元小寫: &#123;&#123; name|lower &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>全部字元大寫: &#123;&#123; name|upper &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>變數name2 未定義,顯示預定字串: &#123;&#123; name2|default(&#x27;the name2 is not defined&#x27;) &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>變數為空值時,顯示預定字串: &#123;&#123; &#x27;&#x27;|default(&#x27;the string was empty&#x27;,true) &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>刪除前後空白字元: &#123;&#123; &#x27;   Hello~~~   &#x27;|trim &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>未移除HTML標籤: &#123;&#123; &#x27;<span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>Hello ha<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>&#x27; &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>轉譯前移除HTML標籤: &#123;&#123; &#x27;<span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>Hello ha<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>&#x27;|striptags &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>轉譯前移除HTML標籤,並再轉大寫字元: &#123;&#123; &#x27;<span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>Hello ha<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>&#x27;|striptags|upper &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="在Jinja2-控制結構"><a href="#在Jinja2-控制結構" class="headerlink" title="在Jinja2 控制結構"></a>在Jinja2 控制結構</h3></li>
<li>只更改 <strong>templates/user.html</strong>,並刪除之前的內容。判斷name 變數的值是否為andy,正確返回 hello andy ; 反之,返回 Hello EveryBody<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if name==&quot;andy&quot; %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> Hello &#123;&#123; name &#125;&#125; !!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> Hello EveryBody !!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li>
<li>迴圈控制。修改<strong>hello.py</strong> 及 <strong>templates/test.html</strong>, 在hello.py 製造一個串列,將它帶往模板的迴圈來處理。</li>
</ul>
<p><strong>hello.py</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/array/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arrayt</span>():</span></span><br><span class="line">    commit=[ <span class="string">&#x27;test&#x27;</span>+<span class="built_in">str</span>(xx) <span class="keyword">for</span> xx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>)]</span><br><span class="line">    <span class="keyword">return</span>  render_template(<span class="string">&#x27;test.html&#x27;</span>,commit=commit)</span><br></pre></td></tr></table></figure>
<p><strong>templates/test.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% for item  in commit %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Hello, &#123;&#123; item &#125;&#125;!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Jinja2 模板引擎也有函數結構,稱為 macro。增加以下內容到 <strong>templates/test.html</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% macro tempf(item) %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>from macro : &#123;&#123; item &#125;&#125;!!!&lt;/li!&gt;</span><br><span class="line">&#123;% endmacro %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% for item  in commit %&#125;</span><br><span class="line">    &#123;&#123; tempf(item) &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>呈上一個macro 範例,使用像是 python import用法,將macro 函數寫在 <strong>template/test2.html</strong>, 修改<strong>template/test.html</strong>在匯入 test2.html。</li>
</ul>
<p>增加以下 到 <strong>template/test2.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% macro tempf(item) %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>from macro with import : &#123;&#123; item &#125;&#125;!!!&lt;/li!&gt;</span><br><span class="line">&#123;% endmacro %&#125;</span><br></pre></td></tr></table></figure>

<p>修改 <strong>template/test.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% import &quot;test2.html&quot; as testmacro %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  &#123;% for item in commit %&#125;</span><br><span class="line">      &#123;&#123; testmacro.tempf(item) &#125;&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Jinja2-模板繼承"><a href="#Jinja2-模板繼承" class="headerlink" title="Jinja2 模板繼承"></a>Jinja2 模板繼承</h3><p>網頁是由html head ,body 等標籤兩兩成對構成,通常程式回應結果只在body 區塊有所變更,沒有必要重新將相同內容放置同一個模板中,因此可以使用模板繼承方式將基礎的模板匯進來。</p>
<ul>
<li>基礎模板: <strong>template/base.html</strong> ; 在 <strong>template/user.html</strong>繼承基礎模板。基礎模板劃分 , head 區塊(),head 裡面 title 區塊, 及 body 區塊,現在只要改變body區塊</li>
</ul>
<p>增加以下內容 至 <strong>template/base.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    &#123;% block head %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span> &#123;% block title %&#125;who 123&#123;% endblock %&#125;  <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% block body %&#125;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修正內容 <strong>template/user.html</strong>,使用extends 繼承 base.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;&#123; name &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>若要在head區塊增加 一個 <strong>meta 標籤</strong>,及改變一個<strong>tile 區塊內容</strong></li>
</ul>
<p>修正內容 <strong>template/user.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line">&#123;% block title %&#125;Title Change &#123;&#123; name &#125;&#125;&#123;% endblock %&#125;</span><br><span class="line">&#123;% block head %&#125;</span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;&#123; name &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>
<p>瀏覽結果發現,網頁title 標題不見。這是因為 title 區塊位於 head 區塊內,也就是說title 是head區塊的內容;當增加<strong>meta 標籤</strong>就會覆蓋掉原本的title 的內容。要解決此問題,只要 head 區塊在增加一個 super();表示再次引用 base.html 基礎模板中的 head 區塊內容。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line">&#123;% block title %&#125;Title Change &#123;&#123; name &#125;&#125;&#123;% endblock %&#125;</span><br><span class="line">&#123;% block head %&#125;</span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"> &#123;&#123;super()&#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;&#123; name &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><ul>
<li><a href="https://www.tenlong.com.tw/products/9789864768684">Flask 網頁開發, 2/e第三章</a></li>
<li><a href="http://docs.jinkan.org/docs/jinja2/templates.html#id19">Jinja2 中文 DOC</a></li>
</ul>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask Config 載入方式</title>
    <url>/2017/11/08/base-Flask-Config-%E8%BC%89%E5%85%A5%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Flask-Config-載入方式"><a href="#Flask-Config-載入方式" class="headerlink" title="Flask Config 載入方式"></a>Flask Config 載入方式</h1><p>Flask config 內建變數很多,可以參考 官方<a href="http://flask.pocoo.org/docs/0.12/config/">Builtin Configuration Values</a>,中文翻譯可以參考<a href="http://python.usyiyi.cn/documents/flask_011_ch/config.html">內置的配置值</a>,這裡用<strong>DEBUG</strong>這個變數說明Config載入方。</p>
<h2 id="以簡單程式碼為範例說明"><a href="#以簡單程式碼為範例說明" class="headerlink" title="以簡單程式碼為範例說明"></a>以簡單程式碼為範例說明</h2><p>預設沒有指定<strong>DEBUG</strong>是表False,不開啟程式debug模式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app=Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;center&gt;&lt;h1&gt;Hello World&lt;/h1&gt;&lt;/center&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>
<p>執行之後可以看到 ,預設沒有debug模式。<br><img src="https://i.imgur.com/GgxpfGZ.png" alt="Flask_NO_Debug"></p>
<p>若有開啟debug模式,如下:<br><img src="https://i.imgur.com/7NDMAt1.png" alt="Flask_Debug"></p>
<ul>
<li>以陣列方式(寫在code裡)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app=Flask(__name__)</span><br><span class="line">...略...</span><br><span class="line">app.config[<span class="string">&quot;DEBUG&quot;</span>]=<span class="literal">True</span></span><br><span class="line">...略...</span><br></pre></td></tr></table></figure></li>
<li>加入參數到app.run()  (寫在code裡)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app=Flask(__name__)</span><br><span class="line">..略..</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li>
<li>以傳入模組物件方式 (寫在code裡)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app=Flask(__name__)</span><br><span class="line">...略...</span><br><span class="line">DEBUG=<span class="literal">True</span></span><br><span class="line">app.config.from_object(__name__)</span><br><span class="line">...略...</span><br></pre></td></tr></table></figure></li>
<li>以傳入模組物件方式 (寫在另一個檔案裡;config.py)<br>config.py<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DEBUG=<span class="literal">True</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app=Flask(__name__)</span><br><span class="line">...略...</span><br><span class="line">app.config.from_object(<span class="string">&#x27;config&#x27;</span>)</span><br><span class="line">...略...</span><br></pre></td></tr></table></figure>
或是也可這樣表示<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line">app=Flask(__name__)</span><br><span class="line">...略...</span><br><span class="line">app.config.from_object(<span class="string">&#x27;config&#x27;</span>)</span><br><span class="line">...略...</span><br></pre></td></tr></table></figure></li>
<li>透過檔案名稱方式載入<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app=Flask(__name__)</span><br><span class="line">...略...</span><br><span class="line">app.config.from_pyfile(<span class="string">&#x27;config.py&#x27;</span>)</span><br><span class="line">...略...</span><br></pre></td></tr></table></figure></li>
<li>透過系統的環境變數載入<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># export tt=&#x27;config.py&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app=Flask(__name__)</span><br><span class="line">...略...</span><br><span class="line">app.config.from_envvar(<span class="string">&#x27;tt&#x27;</span>)</span><br><span class="line">...略...</span><br></pre></td></tr></table></figure>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://www.youtube.com/watch?v=7RWro4VF_9c">Flask Configuration From Environment Variables-Pretty Printed</a></li>
<li><a href="https://www.youtube.com/watch?v=T86FkDhVH5A&t=381s">Flask Configuration</a></li>
</ul>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
</search>
