<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Cache-Only DNS Server</title>
    <url>/2017/09/16/2017-09-16_Cache-Only-DNS-Server/</url>
    <content><![CDATA[<h1 id="單純做cache-Only-DNS"><a href="#單純做cache-Only-DNS" class="headerlink" title="單純做cache-Only DNS"></a>單純做cache-Only DNS</h1><ul>
<li><a href="#pretalk">前言</a></li>
<li><a href="#dns_lab">LAB架構圖</a> </li>
<li><a href="#dns_config">DNS設定檔</a></li>
<li><a href="#dns_boot">DNS啟動</a></li>
<li><a href="#dns_dig">DNS測試</a></li>
<li><a href="#dns_info">參考資料</a><h2 id="pretalk">前言</h2>
將查詢轉送到外部DNS查詢(例如:Google:8.8.8.8;中華電信:168.95.1.1),查詢回來的結果再cache一份在自己的DNS。</li>
</ul>
<h2 id="dns_lab">LAB架構圖</h2>

<p><img src="https://i.imgur.com/QrtHf9P.png" alt="cache-only_Architecture"></p>
<h2 id="dns_config">DNS設定檔</h2>

<ul>
<li>主設定檔: /etc/named.conf (主要是紅框的部分)<br><img src="https://i.imgur.com/WlP77GB.png" alt="cache-only"></li>
</ul>
<h2 id="dns_boot">DNS啟動</h2>
- /etc/init.d/named start
<h2 id="dns_dig">DNS測試</h2>
- 正解測試:
  - dig -t a www.google.com @127.0.0.1
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; &lt;&lt;&gt;&gt; DiG 9.8.2rc1-RedHat-9.8.2-0.62.rc1.el6_9.4 &lt;&lt;&gt;&gt; -t a www.google.com @127.0.0.1</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 25098</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;www.google.com.			IN	A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">www.google.com.		82	IN	A	216.58.200.228</span><br><span class="line"></span><br><span class="line">;; Query time: 82 msec</span><br><span class="line">;; SERVER: 127.0.0.1#53(127.0.0.1)</span><br><span class="line">;; MSG SIZE  rcvd: 48</span><br></pre></td></tr></table></figure>
<h2 id="dns_info">參考資料</h2>

<ul>
<li><a href="https://dns-security.twnic.net.tw/">TWNIC 2017網安實務教育訓練-DNS設定與除錯</a></li>
</ul>
]]></content>
      <tags>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>使用ngrok突破防火牆或NAT限制</title>
    <url>/2017/10/04/2017-10-04_ngrok/</url>
    <content><![CDATA[<h1 id="使用ngrok突破防火牆或NAT限制"><a href="#使用ngrok突破防火牆或NAT限制" class="headerlink" title="使用ngrok突破防火牆或NAT限制"></a>使用ngrok突破防火牆或NAT限制</h1><ul>
<li><a href="#depolymap">架構圖</a></li>
<li><a href="#ngrokd">自建ngrok服務器</a></li>
<li><a href="#ngrokdstart">在Server端啟動ngrokd-Linux</a></li>
<li><a href="#ngrokstart">在Client端ngrok-Linux</a></li>
<li><a href="#ngrokstartwin">在Client端ngrok-Windows</a></li>
<li><a href="#arduinoinfo">參考資料</a><h2 id="depolymap">架構圖</h2>
圖中遠端使用者若想連線到ClientAA,傳統作法在Router或防火牆上設定NAT之類的。現在ClientAA 先與 ngrokd伺服器建立一個通道,遠端使者就可以透過這個通道與ClientAA通訊。</li>
</ul>
<p><img src="https://i.imgur.com/xXxibn2.jpg" alt="ngrok架構圖"></p>
<h2 id="ngrokd">自建ngrok服務器</h2>
###  編譯 ngrokd (Server)  , ngrok (Client)
- 下載 ngrok 原始碼
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;src&#x2F;</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;inconshreveable&#x2F;ngrok</span><br></pre></td></tr></table></figure>
- 使用openssl 建立 SSL 憑證(自簽)
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl genrsa -out rootCA.key 2048</span><br><span class="line">openssl req -new -x509 -nodes -key rootCA.key -days 10000 -subj <span class="string">&quot;/CN=ngrok.aligogo.pw&quot;</span> -out rootCA.pem</span><br><span class="line">openssl genrsa -out server.key 2048</span><br><span class="line">openssl req -new -key server.key -subj <span class="string">&quot;/CN=ngrok.aligogo.pw&quot;</span> -out server.csr</span><br><span class="line">openssl x509 -req -<span class="keyword">in</span> server.csr -CA rootCA.pem -CAkey rootCA.key  -CAcreateserial -days 10000 -out server.crt</span><br></pre></td></tr></table></figure>
- 分別複製 憑證及key到 此目錄下的server及client
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp -p rootCA.pem   assets/client/tls/ngrokroot.crt</span><br><span class="line">cp -p server.key  assets/server/tls/snakeoil.key</span><br><span class="line">cp -p server.crt assets/server/tls/snakeoil.crt</span><br></pre></td></tr></table></figure>

<ul>
<li>編譯。 編譯完在 /usr/src/ngrok/bin/<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make release-server</span><br><span class="line">make release-client</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意: 編譯 ARM 客戶端 (手機用)<br>GOOS=linux GOARCH=arm make release-client<br>編譯 Mac 客戶端 (Macbook用)<br>GOOS=darwin GOARCH=amd64 make release-client<br>編譯 windows 客戶端 (電腦用)<br>GOOS=windows GOARCH=amd64 make release-client<br>或是<br>GOOS=windows GOARCH=386  make release-client</p>
</blockquote>
</li>
</ul>
<h2 id="ngrokdstart">在Server端BB 啟動(Centos6_x86_64)</h2>
###  ngrokd
- 啟動ngrokd。指定 httpAddr、httpsAddr 分別是 ngrok 用來轉發 http、https 服務的端口

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./ngrokd -domain=<span class="string">&quot;ngrok.aligogo.pw&quot;</span> -httpAddr=<span class="string">&quot;:8081&quot;</span> -httpsAddr=<span class="string">&quot;:8082&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li> 另外,ngrokd 預設還會開一個 4443 port 用來跟客戶端通訊 (可以使用 此參數指定 -tunnelAddr=”:xxx”),<br>將 tcp 8081 ,8082 ,4443, 22222 加入防火牆</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -I INPUT 5 -p tcp --dport 4443 -j ACCEPT</span><br><span class="line">iptables -I INPUT 5 -p tcp --dport 8081 -j ACCEPT</span><br><span class="line">iptables -I INPUT 5 -p tcp --dport 8082 -j ACCEPT</span><br><span class="line">iptables -I INPUT 5 -p tcp --dport 22222 -j ACCEPT</span><br></pre></td></tr></table></figure>
<h2 id="ngrokstart">在Client端 AA (Centos6_x86_64) 啟動ngrok去連接 ngrok.aligogo.pw:4443</h2>
- 目標: 讓外部能連接內部 sshd
- 在 Client AA 先確定是否有開啟 sshd

<ul>
<li>與 ngrok 同目錄建立 ngrok.cfg<br>(Server 防火牆要開 port (ex. 58800 (供RDP轉送)、22222 (供SSH轉送)))<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server_addr:</span> <span class="string">&quot;ngrok.aligogo.pw:4443&quot;</span></span><br><span class="line"><span class="attr">trust_host_root_certs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">tunnels:</span></span><br><span class="line">  <span class="attr">rdp:</span></span><br><span class="line">    <span class="attr">remote_port:</span> <span class="number">58800</span></span><br><span class="line">    <span class="attr">proto:</span></span><br><span class="line">      <span class="attr">tcp:</span> <span class="number">3389</span></span><br><span class="line">  <span class="attr">ssh:</span></span><br><span class="line">    <span class="attr">remote_port:</span> <span class="number">22222</span></span><br><span class="line">    <span class="attr">proto:</span></span><br><span class="line">      <span class="attr">tcp:</span> <span class="number">22</span></span><br></pre></td></tr></table></figure></li>
<li>啟動 ngrok</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;ngrok  -config&#x3D;.&#x2F;ngrok.cfg start ssh</span><br></pre></td></tr></table></figure>

<ul>
<li>換顯示以下訊息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngrok                                                                                            (Ctrl+C to quit)</span><br><span class="line">                                                                                                                 </span><br><span class="line">Tunnel Status                 online                                                                             </span><br><span class="line">Version                       1.7&#x2F;1.7                                                                            </span><br><span class="line">Forwarding                    tcp:&#x2F;&#x2F;ngrok.aligogo.pw:22222 -&gt; 127.0.0.1:22                                       </span><br><span class="line">Web Interface                 127.0.0.1:4040                                                                     </span><br><span class="line"># Conn                        0                                                                                  </span><br><span class="line">Avg Conn Time                 0.00ms </span><br></pre></td></tr></table></figure>

<ul>
<li>遠端測試機 是否可以連接 Client 端 AA</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -p 22222 ngrok.aligogo.pw</span><br></pre></td></tr></table></figure>

<h2 id="ngrokstartwin">在Client端CC (Windows 2003) 啟動ngrok 去連接 ngrok.aligogo.pw:4443</h2>
- 目標: 讓外部能連接內部  RDP 3389
- 因為是 Windows ngrok 需要重新編譯

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GOOS&#x3D;windows GOARCH&#x3D;386  make release-client  (for 32位元電腦)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GOOS&#x3D;windows GOARCH&#x3D;amd64 make release-client (for 64位元電腦)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>與 ngrok 同目錄建立 ngrok.cfg<br>(Server 防火牆要開 22222 (供RDP轉送))</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server_addr: &quot;ngrok.aligogo.pw:4443&quot;</span><br><span class="line">trust_host_root_certs: false</span><br><span class="line">tunnels:</span><br><span class="line">  rdp:</span><br><span class="line">    remote_port: 22222</span><br><span class="line">    proto:</span><br><span class="line">      tcp: 3389</span><br></pre></td></tr></table></figure></li>
<li><p>啟動 ngrok</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngrok.exe -config&#x3D;ngrok.cfg  start rdp</span><br></pre></td></tr></table></figure>


<h2 id="arduinoinfo">參考資料</h2>

<ul>
<li><a href="https://ngrok.com/docs#expose">ngrok官方</a></li>
<li><a href="https://blog-gocreating.rhcloud.com/2015/04/24/ngrok-%E8%AE%93localhost%E7%84%A1%E7%B8%AB%E6%8E%A5%E8%BB%8Cinternet%E7%9A%84%E5%A5%BD%E5%B7%A5%E5%85%B7/">ngrok讓localhost無縫接軌internet的好工具</a></li>
<li><a href="http://fu7771.blogspot.tw/2017/08/ngrok-server.html">自架 ngrok server (穿透內網)</a></li>
<li><a href="https://github.com/inconshreveable/ngrok">ngrok-GitHub</a></li>
<li><a href="https://imququ.com/post/self-hosted-ngrokd.html">搭建 ngrok 服務實現內網穿透</a></li>
<li><a href="https://minecraft-zh.gamepedia.com/index.php?title=%E6%95%99%E7%A8%8B/%E4%BD%BF%E7%94%A8ngrok%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8&variant=zh-tw">教程/使用ngrok搭建伺服器</a></li>
</ul>
]]></content>
      <tags>
        <tag>資安</tag>
        <tag>Reverse-Tunnel</tag>
      </tags>
  </entry>
  <entry>
    <title>KVM-in-VMware-Esxi</title>
    <url>/2017/11/27/2017-11-27_KVM-in-VMware-Esx/</url>
    <content><![CDATA[<h1 id="KVM-install"><a href="#KVM-install" class="headerlink" title="KVM install"></a>KVM install</h1><p>KVM 全名為 <strong>Kernel-Based Virtual Machine</strong>,是一個用於Linux核心中的虛擬化基礎設施。<br>本單元主要演示安裝KVM過程,主要利用VMware Esxi 平台建立Netsed hypervisors環境,即是 在 Esxi 平台建立一個 虛擬機 ,在此虛擬機安裝KVM ,再由kvm 建立一台虛擬機。</p>
<h2 id="環境需求"><a href="#環境需求" class="headerlink" title="環境需求"></a>環境需求</h2><ul>
<li>實體機的 CPU 需支持 Intel (<strong>Intel Virtualization Technology, Intel VT-x</strong>); AMD (<strong>AMD Secure Virtual Machine, AMD</strong>)</li>
<li> VMware ESXi 5 或 6 </li>
<li> Ubuntu 16.04 Desktop LTS ,<a href="https://www.ubuntu-tw.org/modules/tinyd0/%22target=%22_blank">下載點</a></li>
</ul>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><ol>
<li>在esxi 平台上建立虛擬機，主要關鍵,勾選硬體虛擬化項目<strong>向Guest OS 公開硬體協助虛擬化</strong>,此操作可以在 <strong>ESXi Web Client or ESXi Host Client</strong>下完成。<br><img src="https://i.imgur.com/akOCDSI.gif" alt="如圖示說明"></li>
<li>網路部分,需要將VSS Security Policies的<strong>Promiscuous mode</strong> 設為允許。此功能相當於HUB,將port 收到的封包,會廣播向其它的Port傳送<br><img src="https://i.imgur.com/mz6ppy6.gif" alt="Promiscuous mode"></li>
</ol>
<p>3.之後,虛擬機安裝OS ,Ubuntu 16.04 Desktop LTS<br>4.之後,安裝完OS。先確定以下項目,每項都必須確認無誤後,才能做下一步</p>
<ul>
<li>VM是否支援CPU虛擬化<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -E -i &#39;vmx|svm&#39; &#x2F;etc&#x2F;cpuinfo</span><br></pre></td></tr></table></figure></li>
<li>確認kvm是否安奘<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install cpu-checker</span><br><span class="line">kvm-ok</span><br></pre></td></tr></table></figure></li>
<li>確認是否有載入KVM 相關模組<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsmod|grep kvm</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="5">
<li>安裝 libvirt,及看使用者(這邊以 andy)是否在指定群組<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install qemu-kvm libvirt-bin</span><br><span class="line">grep andy &#x2F;etc&#x2F;group</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adm:x:4:syslog,andy</span><br><span class="line">cdrom:x:24:andy</span><br><span class="line">sudo:x:27:andy</span><br><span class="line">dip:x:30:andy</span><br><span class="line">plugdev:x:46:andy</span><br><span class="line">lpadmin:x:113:andy</span><br><span class="line">andy:x:1000:</span><br><span class="line">sambashare:x:128:andy</span><br><span class="line">libvirtd:x:130:andy</span><br></pre></td></tr></table></figure></li>
<li>安裝 virt-manager , bridge-utils <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install virt-manager bridge-utils</span><br></pre></td></tr></table></figure></li>
<li>開始執行virt-manager 建立虛擬機,會跳出以下圖示<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo virt-manager</span><br></pre></td></tr></table></figure>
<img src="https://i.imgur.com/LlPqEU0.gif" alt="virt-manager"><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></li>
</ol>
<ul>
<li><a href="http://www.vladan.fr/nested-esxi-6-in-a-lab/">Nested ESXi 6 in a Lab</a></li>
<li><a href="http://www.ntueees.tp.edu.tw/wordpress/?p=2981">Fedora 17 KVM於ESXi 5.1參數設定與安裝VMTools</a></li>
</ul>
]]></content>
      <tags>
        <tag>KVM</tag>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx location  匹配原則</title>
    <url>/2017/03/12/2017-03-12_Nginx-Location-Matching/</url>
    <content><![CDATA[<h1 id="Nginx-location-匹配原則"><a href="#Nginx-location-匹配原則" class="headerlink" title="Nginx location  匹配原則"></a>Nginx location  匹配原則</h1><h2 id="語法格式"><a href="#語法格式" class="headerlink" title="語法格式"></a>語法格式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">...</span><br><span class="line">    server&#123;</span><br><span class="line">         location  [ &#x3D; | ~ | ~* | ^~ | @ ] &#x2F;uri&#x2F; &#123;</span><br><span class="line">         ......</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="location-優先順序比對原則-重要"><a href="#location-優先順序比對原則-重要" class="headerlink" title="location 優先順序比對原則 (重要!!!)"></a>location 優先順序比對原則 (重要!!!)</h2><ul>
<li>“=” &gt; “^<del>“ &gt; “</del>“ &gt; “/uri/“   &gt; “/“  (location 的 前綴)</li>
<li>其中 “=” , “^~” , “@”  和  /uri/ (無任何前綴) 都是屬於 一般 location(也就是文字字串)</li>
<li>其中  ~  , ~*  是屬於 正規表示法的 location</li>
<li>location <strong>會先匹配文字字串 ,再匹配正規表示法</strong></li>
<li>文字字串 以匹配<strong>最長字串為原則</strong>, 文字字串沒有位置的先後順序。</li>
<li>正規表示法 有先後順序</li>
</ul>
<h3 id="“-”"><a href="#“-”" class="headerlink" title="“=”"></a>“=”</h3><ul>
<li>嚴格精確比對</li>
<li>匹配之後, 即終止後面的location 比對</li>
<li>文字字串比對</li>
</ul>
<h3 id="“-”-1"><a href="#“-”-1" class="headerlink" title="“^~”"></a>“^~”</h3><ul>
<li>文字字串比對</li>
<li>匹配之後, 即終止後面的location 比對,其實還有另一種含意 (^ 表示「非」，~ 表示「正規表示法」，字符意思是：不要繼續匹配正規表示法)</li>
<li>區分大小寫</li>
<li>不會做URL encode</li>
</ul>
<h3 id="“-”-2"><a href="#“-”-2" class="headerlink" title="“~”"></a>“~”</h3><ul>
<li>正規表示法比對</li>
<li>區分大小寫</li>
</ul>
<h3 id="“-”-3"><a href="#“-”-3" class="headerlink" title="“~*”"></a>“~*”</h3><ul>
<li>正規表示法比對</li>
<li>不區分大小寫</li>
</ul>
<h2 id="location-LAB-實踐演練說明"><a href="#location-LAB-實踐演練說明" class="headerlink" title="location LAB 實踐演練說明"></a>location LAB 實踐演練說明</h2><h3 id="“-“-““-優先順序"><a href="#“-“-““-優先順序" class="headerlink" title="“^“   ““   優先順序"></a>“^<del>“   “</del>“   優先順序</h3><ul>
<li>Nginx 設定檔<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost 172.17.0.*;</span><br><span class="line">    root &#x2F;var&#x2F;www&#x2F;html;</span><br><span class="line">    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;localhost-access.log  main;</span><br><span class="line">    error_log   &#x2F;var&#x2F;log&#x2F;nginx&#x2F;localhost-error.log;</span><br><span class="line"></span><br><span class="line">    location ~ &#x2F;test&#x2F; &#123;</span><br><span class="line">        echo &quot;A&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    location ^~ &#x2F;test &#123;</span><br><span class="line">        echo &quot;B&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li> 測試及說明<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl 172.17.0.2&#x2F;test&#x2F;    &#x3D;&#x3D;&gt; 會return  B</span><br><span class="line">按照location 匹配原則;先執行文字字串的比對,再比對正規表示法。</span><br><span class="line">這邊找到 &quot;^~&quot; 比對文字字串,因 &quot;^~&quot; 特性比對到,就終止後面 正規表示法的比對。</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="“-”-“-“-““-優先順序"><a href="#“-”-“-“-““-優先順序" class="headerlink" title="“=”  “^“  ““  優先順序"></a>“=”  “^<del>“  “</del>“  優先順序</h3><ul>
<li>Nginx 設定檔<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">...</span><br><span class="line">    location ~ &#x2F;test&#x2F; &#123;</span><br><span class="line">        echo &quot;A&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    location ^~ &#x2F;test &#123;</span><br><span class="line">        echo &quot;B&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    location  &#x3D;&#x2F;test&#123;</span><br><span class="line">        echo  &quot;C&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>測試和說明<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl 172.17.0.2&#x2F;test&#x2F;  &#x3D;&#x3D;&gt; return C</span><br><span class="line">按照location 匹配原則;這邊找到 &quot;&#x3D;&quot; 比對文字字串,因 &quot;&#x3D;&quot; 精確比對到,就終止後面 正規表示法的比對。</span><br></pre></td></tr></table></figure>
<h3 id="“-”-正規表示法-有位置執行順序"><a href="#“-”-正規表示法-有位置執行順序" class="headerlink" title="“~”  正規表示法 有位置執行順序"></a>“~”  正規表示法 有位置執行順序</h3></li>
<li>Nginx 設定檔<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">....</span><br><span class="line">    location ~ ^&#x2F;test&#x2F;.*\.(html|htm|jpg|gif)$ &#123;</span><br><span class="line">        echo &quot;A&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ ^&#x2F;test&#x2F;.*\.(html|htm|jpg|gif|png)$ &#123;</span><br><span class="line">        echo &quot;B&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>測試及說明<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl 172.17.0.2&#x2F;test&#x2F;123.html   &#x3D;&#x3D;&gt; A</span><br><span class="line">這邊找不到文字字串比對,再以正規表示法比對, 第一筆location 比對到就終止後面正規表示法的執行。</span><br><span class="line"></span><br><span class="line">curl 172.17.0.2&#x2F;test&#x2F;123.jpg   &#x3D;&#x3D;&gt; A</span><br><span class="line">這邊找不到文字字串比對,再以正規表示法比對, 第一筆location 比對到就終止後面正規表示法的執行。</span><br><span class="line"></span><br><span class="line">curl 172.17.0.2&#x2F;test&#x2F;123.png  &#x3D;&#x3D;&gt; B</span><br><span class="line">這邊找不到文字字串比對,再以正規表示法比對, 第一筆location 沒有比對到,再繼續 第二筆正規表示法的比對,比對到就終止後面正規表示法的執行。</span><br></pre></td></tr></table></figure>
<h3 id="uri-優先順序"><a href="#uri-優先順序" class="headerlink" title="/uri/  ~ 優先順序"></a>/uri/  ~ 優先順序</h3></li>
<li>nginx 設定檔<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">....</span><br><span class="line">   location    &#x2F;test&#x2F;123.png &#123;</span><br><span class="line">        echo &quot;C&quot;;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   location ~ ^&#x2F;test&#x2F;.*\.(html|htm|jpg|gif)$ &#123;</span><br><span class="line">        echo &quot;Test A&quot;;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   location ~ \.(html|png)$ &#123;</span><br><span class="line">        echo &quot;B&quot;;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   location ~ ^&#x2F;test&#x2F;.*\.(html|htm|jpg|gif|png)$ &#123;</span><br><span class="line">        echo &quot;Test B&quot;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>測試及說明<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;172.17.0.2&#x2F;test&#x2F;123.png  &#x3D;&#x3D;&#x3D;&gt;  B</span><br><span class="line">以文字字串比對 匹配到 第一筆location ,再以 正規表示法比對 匹配第三筆 location ,就終止後面的比對。</span><br><span class="line"></span><br><span class="line">若將第三筆 location mark 起來 &quot;#location ~ \.(html|png)$&quot; 測試看看; curl http:&#x2F;&#x2F;172.17.0.2&#x2F;test&#x2F;123.png &#x3D;&#x3D;&gt; Test B</span><br><span class="line">以文字字串比對 匹配到 第一筆location ,再以 正規表示法比對 匹配第四筆location,就終止後面的比對。</span><br><span class="line"></span><br><span class="line">將剛才mark 第三筆 location拿掉。測試 </span><br><span class="line">curl http:&#x2F;&#x2F;172.17.0.2&#x2F;123.html  &#x3D;&#x3D;&gt; B</span><br><span class="line"> 以文字字串比對 沒匹配到,再以 正規表示法比對匹配第三筆 location ,就終止後面的比對。</span><br><span class="line"></span><br><span class="line">curl http:&#x2F;&#x2F;172.17.0.2&#x2F;test&#x2F;123.html  &#x3D;&#x3D;&gt; Test A</span><br><span class="line">以文字字串比對,沒匹配到,再以正規表示法比對,匹配第二筆 location,就終止後面的比對。</span><br></pre></td></tr></table></figure>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2></li>
<li><a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#location">官網 NGINX- location</a></li>
<li><a href="http://freehat.blog.51cto.com/1239536/1610902">51Cto - nginx location 規則優先級</a></li>
<li><a href="http://eyesmore.iteye.com/blog/1141660">Nginx 關於 location 的匹配規則詳解</a></li>
<li><a href="https://smalltowntechblog.com/2014/10/25/nginx-location-regex%E7%AD%86%E8%A8%98/">Nginx Location REGEX 比對語法和設定</a></li>
<li><a href="http://seanlook.com/2015/05/17/nginx-location-rewrite/">nginx配置location總結及rewrite規則寫法 </a></li>
</ul>
]]></content>
      <tags>
        <tag>NGINX</tag>
      </tags>
  </entry>
  <entry>
    <title>SoftEther VPN - Site to Site L2 Bridge VPN</title>
    <url>/2017/12/19/2017-12-19_SoftEther-VPN-Site-to-Site-L2-Bridge-VPN/</url>
    <content><![CDATA[<ul>
<li><a href="#depolymap">架構說明</a></li>
<li><a href="#install">安裝SoftEther VPN Server 及配置</a></li>
<li><a href="#dhcpserver">架設DHCP Server</a></li>
<li><a href="#install2">安裝SoftEther VPN  bridge及配置</a></li>
<li><a href="#cascade">串接 Cascade</a></li>
<li><a href="#checkclient">Client端驗證</a></li>
<li><a href="#arduinoinfo">參考資料</a></li>
</ul>
<h2 id="depolymap">架構說明</h2>

<p><img src="https://i.imgur.com/brUIAge.png" alt="sito2sitel2"><br>本實驗使用 vsphere Esxi 建立的LAB。此實驗目的要讓分屬在不同的廣域網路透過<strong>SoftEther VPN</strong> 將兩者串接在一起,形成邏輯上的區域網路。換言之,假設圖中 Site B 是位於台中辦公室; Site A 位於台北辦公室,透過SoftEther VPN串接起來,台中與台北辦公室彼此就可透過區域網路的方式互傳資料,或是台中有架一台DHCP Server(假設是 192.168.11.110-150);台北辦公室的Client端就可以分配到一個私有IP(192.168.11.x)。</p>
<blockquote>
<p>上面架構圖中右邊 顯示 <strong>vSwitch5</strong> 應改成 <strong>vSwitch4</strong></p>
</blockquote>
<p>因為只是模擬的實驗,192.168.88.62 與 192.168.88.63當作是網域網路的Public IP。vSwitch0 , vSwitch 3及vSwitch 4是 Vsphere Esxi 模擬出來的。像是如下<br><img src="https://i.imgur.com/c4r8DXh.png" alt="vswitch0"><br><img src="https://i.imgur.com/UOBsuuE.png" alt="vswitch3_4"></p>
<h2 id="install">安裝SoftEther VPN Server 及配置</h2>
- 安裝SoftEther VPN Server  及 啟動 vpnserver
執行到 make 就依照 它提問進行即可。
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cd &#x2F;usr&#x2F;local&#x2F;src&#x2F;</span><br><span class="line"># wget http:&#x2F;&#x2F;www.softether-download.com&#x2F;files&#x2F;softether&#x2F;v4.24-9651-beta-2017.10.23-tree&#x2F;Linux&#x2F;SoftEther_VPN_Server&#x2F;64bit_-_Intel_x64_or_AMD64&#x2F;softether-vpnserver-v4.24-9651-beta-2017.10.23-linux-x64-64bit.tar.gz</span><br><span class="line"># tar zxf softether-vpnserver-v4.24-9651-beta-2017.10.23-linux-x64-64bit.tar.gz</span><br><span class="line"># cd vpnserver&#x2F;</span><br><span class="line"># make</span><br><span class="line"></span><br><span class="line">cd ..</span><br><span class="line">mv vpnserver&#x2F; &#x2F;usr&#x2F;local&#x2F;</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;vpnserver</span><br><span class="line"></span><br><span class="line">chmod 600 *</span><br><span class="line">chmod 700 vpnserver</span><br><span class="line">chmod 700 vpncmd </span><br></pre></td></tr></table></figure>
vpnserver  啟動腳本; /etc/init.d/vpnserver
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line"># chkconfig: 2345 99 01</span><br><span class="line"># description: SoftEther VPN Server</span><br><span class="line">DAEMON&#x3D;&#x2F;usr&#x2F;local&#x2F;vpnserver&#x2F;vpnserver</span><br><span class="line">LOCK&#x3D;&#x2F;var&#x2F;lock&#x2F;subsys&#x2F;vpnserver</span><br><span class="line">test -x $DAEMON || exit 0</span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">start)</span><br><span class="line">$DAEMON start</span><br><span class="line">touch $LOCK</span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line">$DAEMON stop</span><br><span class="line">rm $LOCK</span><br><span class="line">;;</span><br><span class="line">restart)</span><br><span class="line">$DAEMON stop</span><br><span class="line">sleep 3</span><br><span class="line">$DAEMON start</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;Usage: $0 &#123;start|stop|restart&#125;&quot;</span><br><span class="line">exit 1</span><br><span class="line">esac</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>
- 在啟動 vpnserver 之前 ,先使用vpncmd check 系統狀態
選擇 3 , 打上 check 指令。
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;vpnserver</span><br><span class="line">.&#x2F;vpncmd</span><br><span class="line"></span><br><span class="line">VPN Tools&gt;check</span><br></pre></td></tr></table></figure>
- 更改權限,設定開機啟動及啟動 vpnserver
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod a+x &#x2F;etc&#x2F;init.d&#x2F;vpnserver</span><br><span class="line">chkconfig --add vpnserver </span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;vpnserver start</span><br></pre></td></tr></table></figure>
- 建立一個 Virtual Hub  名為 Taichung ,  並切換到該 Virtual Hub
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VPN Server&gt;hubcreate Taichung</span><br><span class="line">VPN Server&gt;hub Taichung</span><br></pre></td></tr></table></figure>
- 設定使用者帳號及密碼 ;  VPN Server  與 bridge 建立聯結(Cascade)時需要的
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VPN Server&#x2F;Taichung&gt;usercreate amy</span><br><span class="line">VPN Server&#x2F;Taichung&gt;userpasswordset amy</span><br></pre></td></tr></table></figure>
- show  virtual hub list
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VPN Server&#x2F;Taichung&gt;hublist</span><br><span class="line">HubList 命令 - 获取一个虚拟 HUB 列表</span><br><span class="line">项目        |价值</span><br><span class="line">------------+-------------------</span><br><span class="line">虚拟 HUB 名 |DEFAULT</span><br><span class="line">状态        |在线</span><br><span class="line">类型        |独立</span><br><span class="line">用户        |0</span><br><span class="line">组          |0</span><br><span class="line">会话        |0</span><br><span class="line">MAC 表      |0</span><br><span class="line">IP 表       |0</span><br><span class="line">登录次数    |0</span><br><span class="line">最后登录时间|2017-12-16 15:45:32</span><br><span class="line">最后通信时间|2017-12-16 15:45:32</span><br><span class="line">传输字节    |0</span><br><span class="line">传输数据包  |0</span><br><span class="line">------------+-------------------</span><br><span class="line">虚拟 HUB 名 |Taichung</span><br><span class="line">状态        |在线</span><br><span class="line">类型        |独立</span><br><span class="line">用户        |1</span><br><span class="line">组          |0</span><br><span class="line">会话        |0</span><br><span class="line">MAC 表      |0</span><br><span class="line">IP 表       |0</span><br><span class="line">登录次数    |0</span><br><span class="line">最后登录时间|2017-12-16 15:51:59</span><br><span class="line">最后通信时间|2017-12-16 15:51:59</span><br><span class="line">传输字节    |0</span><br><span class="line">传输数据包  |0</span><br><span class="line">命令成功完成。</span><br></pre></td></tr></table></figure>
- 建立 local bridge 。 將 此Lab的 eth1 加入 local bridge , 再將 local bridge 加入到 virtual hub
使用 bridgecreate 指令。
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VPN Server&#x2F;Taichung&gt;bridgecreate Taichung</span><br><span class="line">BridgeCreate 命令 - 创建本地的网桥连接</span><br><span class="line">目标网桥的设备名称: eth1</span><br></pre></td></tr></table></figure>
- 看local bridge 狀態
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VPN Server&#x2F;Taichung&gt;bridgelist</span><br><span class="line">BridgeList 命令 - 获得当地网桥连接列表</span><br><span class="line">编号|虚拟 HUB 名称|网络适配器或 tap 设备名称|状态</span><br><span class="line">----+-------------+-------------------------+------</span><br><span class="line">1   |Taichung     |eth1                     |运行中</span><br></pre></td></tr></table></figure>
<h2 id="dhcpserver">架設DHCP Server</h2>
架構圖中有一台DHCP Server,主要驗證整個環境的應用;DHCP Server 發出的廣播封包是否可到達廣域網路的另一端。

<ul>
<li>此台機器 先忽略 防火牆防護<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -F</span><br></pre></td></tr></table></figure></li>
<li>安裝 dnsmasq<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># yum instal dnsmasq</span><br></pre></td></tr></table></figure></li>
<li>設定 dnsmasq ; /etc/dnsmasq.conf<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">port&#x3D;</span><br><span class="line">dhcp-leasefile&#x3D;&#x2F;tmp&#x2F;dnsmasq.leases</span><br><span class="line">interface&#x3D;eth1</span><br><span class="line">dhcp-range&#x3D;192.168.11.101,192.168.11.115,12h</span><br><span class="line">dhcp-option&#x3D;1,255.255.255.0 #subnet mask</span><br><span class="line">dhcp-option&#x3D;28,192.168.11.255 #broadcast</span><br><span class="line">dhcp-option&#x3D;3,192.168.11.250 #default gateway</span><br><span class="line">dhcp-option&#x3D;6,192.168.11.251 #DNS</span><br></pre></td></tr></table></figure></li>
<li>啟動 dnsmasq<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;dnsmasq start</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="install2">安裝SoftEther VPN  bridge及配</h2>
- 安裝SoftEther VPN bridge
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cd &#x2F;usr&#x2F;local&#x2F;src&#x2F;</span><br><span class="line"># wget http:&#x2F;&#x2F;www.softether-download.com&#x2F;files&#x2F;softether&#x2F;v4.24-9651-beta-2017.10.23-tree&#x2F;Linux&#x2F;SoftEther_VPN_Bridge&#x2F;32bit_-_Intel_x86&#x2F;softether-vpnbridge-v4.24-9651-beta-2017.10.23-linux-x86-32bit.tar.gz</span><br><span class="line"># tar zxf softether-vpnbridge-v4.24-9651-beta-2017.10.23-linux-x86-32bit.tar.gz</span><br><span class="line"># cd vpnbridge</span><br><span class="line"># make</span><br><span class="line"># cd ..</span><br><span class="line"># mv vpnbridge&#x2F; &#x2F;usr&#x2F;local&#x2F;</span><br><span class="line"># cd &#x2F;usr&#x2F;local&#x2F;vpnbridge&#x2F;</span><br><span class="line"># chmod 600 *</span><br><span class="line"># chmod 700 vpnserver</span><br><span class="line"># chmod 700 vpncmd</span><br></pre></td></tr></table></figure>
- 建立 vpn bridge 啟動檔; /etc/init.d/vpnbridge
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line"># chkconfig: 2345 99 01</span><br><span class="line"># description: SoftEther VPN Server</span><br><span class="line">DAEMON&#x3D;&#x2F;usr&#x2F;local&#x2F;vpnbridge&#x2F;vpnbridge</span><br><span class="line">LOCK&#x3D;&#x2F;var&#x2F;lock&#x2F;subsys&#x2F;vpnbridge</span><br><span class="line">test -x $DAEMON || exit 0</span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">start)</span><br><span class="line">$DAEMON start</span><br><span class="line">touch $LOCK</span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line">$DAEMON stop</span><br><span class="line">rm $LOCK</span><br><span class="line">;;</span><br><span class="line">restart)</span><br><span class="line">$DAEMON stop</span><br><span class="line">sleep 3</span><br><span class="line">$DAEMON start</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;Usage: $0 &#123;start|stop|restart&#125;&quot;</span><br><span class="line">exit 1</span><br><span class="line">esac</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>
- 在啟動 vpnbridge 之前 ,先使用vpncmd check 系統狀態 選擇 3 , 打上 check 指令。
與上一節vpnserver 一樣。
- 更改權限,設定開機啟動及啟動 vpnbridge
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod a+x &#x2F;etc&#x2F;init.d&#x2F;vpnbridge  </span><br><span class="line">chkconfig --add vpnbridge  </span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;vpnbridge start</span><br></pre></td></tr></table></figure>
- 開始配置設定。 執行 /usr/local/vpnbridge/vpncmd
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#x2F;usr&#x2F;local&#x2F;vpnbridge&#x2F;vpncmd</span><br><span class="line">選擇1</span><br><span class="line">不用填寫 目标 IP 地址的主機名 , 指定虚擬 HUB 名稱 ,按 Enter 直接略過。</span><br></pre></td></tr></table></figure>
- SoftEther bridge 預設已 建立 名為 bridge 的 virtual hub ,直接建立 local bridge
- show virtual hub  list
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VPN Server&gt;hublist</span><br><span class="line">HubList 命令 - 获取一个虚拟 HUB 列表</span><br><span class="line">项目        |价值</span><br><span class="line">------------+-------------------</span><br><span class="line">虚拟 HUB 名 |BRIDGE</span><br><span class="line">状态        |在线</span><br><span class="line">类型        |独立</span><br><span class="line">用户        |0</span><br><span class="line">组          |0</span><br><span class="line">会话        |2</span><br><span class="line">MAC 表      |5</span><br><span class="line">IP 表       |4</span><br><span class="line">登录次数    |0</span><br><span class="line">最后登录时间|2017-12-16 16:24:36</span><br><span class="line">最后通信时间|2017-12-16 18:05:06</span><br><span class="line">传输字节    |3,665,196</span><br><span class="line">传输数据包  |39,112</span><br><span class="line">命令成功完成。</span><br></pre></td></tr></table></figure>
- 建立 local bridge 。 將 此Lab的 eth1 加入 local bridge , 再將 local bridge 加入到 virtual hub
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VPN Server&gt;bridgecreate </span><br><span class="line">BridgeCreate 命令 - 创建本地的网桥连接</span><br><span class="line">网桥虚拟 HUB 名称: bridge</span><br><span class="line"></span><br><span class="line">目标网桥的设备名称: eth1</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VPN Server&gt;bridgelist</span><br><span class="line">BridgeList 命令 - 获得当地网桥连接列表</span><br><span class="line">编号|虚拟 HUB 名称|网络适配器或 tap 设备名称|状态</span><br><span class="line">----+-------------+-------------------------+------</span><br><span class="line">1   |bridge       |eth1                     |运行中</span><br><span class="line">命令成功完成。</span><br></pre></td></tr></table></figure>



<h2 id="cascade">串接</h2>
上面SoftEther VPN Server 與 Bridge 各自已安裝完成及設定好,現在要執行將 softEther Bridge 與 SoftEther Server 做串接(Cascade)。
- 在SoftEther Bridge那一台 執行 vpncmd
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#x2F;usr&#x2F;local&#x2F;vpnbridge&#x2F;vpncmd</span><br><span class="line">選擇1</span><br></pre></td></tr></table></figure>
- 交換到 virtual hub  為 bridge
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VPN Server&gt;hub bridge</span><br></pre></td></tr></table></figure>
- 建立聯結名稱為 VPN , 設定 VPN Server 為 192.168.88.62:443 , VPN Server 的 虛擬 HUB 為 Taichung, 及 設定聯結的使用者為 amy (在VPN server  階段建立的)
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VPN Server&#x2F;BRIDGE&gt;cascadecreate</span><br><span class="line">CascadeCreate 命令 - 创建一个新的级联接续</span><br><span class="line">级联接续的名称: VPN</span><br><span class="line">目标 VPN Server 的主机名和端口号: 192.168.88.62:443</span><br><span class="line">目标虚拟 HUB 名称: Taichung</span><br><span class="line">连接使用的用户名: amy</span><br><span class="line">命令成功完成。</span><br></pre></td></tr></table></figure>
- 指令為「cascadepasswordset」，並輸入串接連結名稱為「VPN」，接著輸入之前在VPN Server設定的使用者密碼，最後選擇使用「standard」
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VPN Server&#x2F;BRIDGE&gt;cascadepasswordset VPN</span><br><span class="line">CascadePasswordSet 命令 - 将级联连接时所需的用户验证设置为密码验证</span><br><span class="line">请输入密码。要取消，请按下 Ctrl + D 键。</span><br><span class="line"></span><br><span class="line">密码    : **********</span><br><span class="line">确认输入: **********</span><br><span class="line"></span><br><span class="line">指定 standard 或者 radius: standard</span><br><span class="line">命令成功完成。</span><br></pre></td></tr></table></figure>
- 執行 cascadeonline 指令 進行串接
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VPN Server&#x2F;BRIDGE&gt;cascadeonline VPN</span><br><span class="line">CascadeOnline 命令 - 设置级联接续的在线状态</span><br><span class="line">命令成功完成。</span><br></pre></td></tr></table></figure>
- 執行 cascadestatusget 指令獲取串接狀態
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VPN Server&#x2F;BRIDGE&gt;cascadestatusget</span><br><span class="line">CascadeStatusGet 命令 - 获取级联的当前状态</span><br><span class="line">级联接续的名称: VPN</span><br><span class="line"></span><br><span class="line">项目               |价值</span><br><span class="line">-------------------+----------------------------------------</span><br><span class="line">VPN 连接设置名称   |VPN</span><br><span class="line">会话状态           |连接完成 (会话建立)</span><br><span class="line">VLAN ID            |－</span><br><span class="line">服务器名           |192.168.88.62</span><br><span class="line">端口号             |TCP 端口 443</span><br><span class="line">服务端产品名称     |SoftEther VPN Server (32 bit)</span><br><span class="line">服务端版本         |4.24</span><br><span class="line">服务端内部标号     |Build 9651</span><br><span class="line">连接开始时间       |2017年12月16日(星期六) 16点41分 7秒</span><br><span class="line">首次会话建立时间   |2017年12月16日(星期六) 16点41分 7秒</span><br><span class="line">当前会话建立时间   |2017年12月16日(星期六) 16点41分 7秒</span><br><span class="line">已建立的会话数     |1 次</span><br><span class="line">半双工 TCP 连接模式|否 (全双工模式)</span><br><span class="line">VoIP &#x2F; QoS 功能    |已启用</span><br><span class="line">TCP 连接数         |8</span><br><span class="line">TCP 连接数最大值   |8</span><br><span class="line">加密               |已启用 (算法: AES128-SHA)</span><br><span class="line">使用压缩           |否 (不压缩)</span><br><span class="line">物理底层协议       |Standard TCP&#x2F;IP (IPv4)</span><br><span class="line">支持 UDP 加速      |是</span><br><span class="line">UDP 加速已激活     |是</span><br><span class="line">会话名             |SID-AMY-2</span><br><span class="line">连接名             |CID-4</span><br><span class="line">会话密钥 (160 位)  |DDA3FED7FFCAC795C104C4CFC2982876AAE506E7</span><br><span class="line">网桥 &#x2F; 路由模式    |是</span><br><span class="line">监测模式           |否</span><br><span class="line">输出数据量         |4,947 字节</span><br><span class="line">输入数据量         |4,998 字节</span><br><span class="line">传出单播数据包     |3 数据包</span><br><span class="line">传出单播总量       |180 字节</span><br><span class="line">传出广播数据包     |6 数据包</span><br><span class="line">传出广播总量       |502 字节</span><br><span class="line">传入单播数据包     |3 数据包</span><br><span class="line">传入单播总量       |126 字节</span><br><span class="line">传入广播数据包     |0 数据包</span><br><span class="line">传入广播总量       |0 字节</span><br><span class="line">命令成功完成。</span><br></pre></td></tr></table></figure>
<h2 id="checkclient">Client端驗證</h2>
開啟client 端, 將網路設定DHCP 。重新整理網路,看是否有抓到192.168.11.x 這個網段的IP


<h2 id="arduinoinfo">參考資料</h2>

<ul>
<li><a href="https://www.softether.org/4-docs/1-manual/1._SoftEther_VPN_Overview/1.2_SoftEther_VPN_Components">SoftEther VPN Components</a></li>
<li><a href="https://www.softether.org/4-docs/1-manual/1._SoftEther_VPN_Overview/1.4_VPN_Processing_Principle_and_Communication_Method">VPN Processing Principle and Communication Method </a></li>
<li><a href="https://www.softether.org/4-docs/1-manual/3._SoftEther_VPN_Server_Manual/3.6_Local_Bridges">Local Bridges </a></li>
<li><a href="http://www.netadmin.com.tw/article_content.aspx?sn=1708080001&jump=2">網管人-安裝SoftEther VPN　活用樹莓派自造翻牆機</a></li>
<li><a href="http://www.netadmin.com.tw/article_content.aspx?sn=1711070001">網管人-樹莓派兩片架窮人閘道器　大玩L2 Bridge VPN</a></li>
<li><a href="https://www.softether.org/4-docs/1-manual/9._Installing_SoftEther_VPN_Bridge/9.3_Install_on_Linux_and_Initial_Configurations">Install on Linux and Initial Configurations</a></li>
<li><a href="https://www.youtube.com/watch?v=WHfsUDqtbiM">使用 SoftEther 建立 Layer2 橋接的 Site to Site VPN 通道</a></li>
<li><a href="http://www.ichiayi.com/wiki/tech/dnsmasq">輕量型DHCP server - dnsmasq</a></li>
</ul>
]]></content>
      <tags>
        <tag>SoftEther-VPN</tag>
        <tag>VPN</tag>
      </tags>
  </entry>
  <entry>
    <title>minikube on Windows 10</title>
    <url>/2018/02/04/2018-02-04_minikube-on-Windows-10/</url>
    <content><![CDATA[<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><ul>
<li>事先裝好VirtualBox</li>
<li>下載 minikube.exe <a href="https://github.com/kubernetes/minikube/releases">https://github.com/kubernetes/minikube/releases</a></li>
<li>下載<a href="https://storage.googleapis.com/kubernetes-release/release/v1.8.0/bin/windows/amd64/kubectl.exe">kubectl.exe</a></li>
<li>minikube 開始<br>開始cmd, 執行以命令後, 在vitrtualbox會自動建立一個名為minikube的VM<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">minikube.exe  get-k8s-versions</span><br><span class="line">minikube.exe  start</span><br></pre></td></tr></table></figure>
<h2 id="minikube-Web-介面"><a href="#minikube-Web-介面" class="headerlink" title="minikube Web 介面"></a>minikube Web 介面</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">minikube dashboard</span><br></pre></td></tr></table></figure>
會自動開啟  WEB ,位置大概是在 <a href="http://192.168.99.100:30000/">http://192.168.99.100:30000</a></li>
</ul>
<h2 id="開始部屬APP-deployment"><a href="#開始部屬APP-deployment" class="headerlink" title="開始部屬APP (deployment)"></a>開始部屬APP (deployment)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl.exe run mynginx --image&#x3D;nginx --port&#x3D;80</span><br><span class="line">kubectl.exe get pods</span><br><span class="line">kubectl get node -o wide</span><br><span class="line">kubectl.exe  get deployments</span><br></pre></td></tr></table></figure>
<h2 id="發布APP-services"><a href="#發布APP-services" class="headerlink" title="發布APP (services)"></a>發布APP (services)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl.exe expose deployment mynginx --type&#x3D;&quot;NodePort&quot;</span><br><span class="line">kubectl.exe  get services</span><br></pre></td></tr></table></figure>
<h2 id="測試存取APP"><a href="#測試存取APP" class="headerlink" title="測試存取APP"></a>測試存取APP</h2><ul>
<li><p>kubectl.exe  get services</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443&#x2F;TCP        54m</span><br><span class="line">mynginx      NodePort    10.100.18.218   &lt;none&gt;        80:30213&#x2F;TCP   7m</span><br></pre></td></tr></table></figure></li>
<li><p>看 k8s Master 的 IP 為何</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">minikube service mynginx --url</span><br></pre></td></tr></table></figure></li>
<li><p>curl <a href="http://192.168.99.100:30213/">http://192.168.99.100:30213</a></p>
</li>
</ul>
<h2 id="探索APP"><a href="#探索APP" class="headerlink" title="探索APP"></a>探索APP</h2><ul>
<li><p>list pods 詳細資訊</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl.exe  describe pods</span><br></pre></td></tr></table></figure></li>
<li><p>依上述所列的Name即是pod的名稱,看 pod 裡 log 相關資訊</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl.exe  logs pod-Name</span><br></pre></td></tr></table></figure></li>
<li><p>到 pods container 執行命令列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl.exe exec -it pod-Name bash</span><br></pre></td></tr></table></figure></li>
<li><p>刪除 pods , servies </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl.exe  delete  deployment mynginx</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl.exe  delete service mynginx</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://kubernetes.io/docs/tasks/tools/install-minikube/">官方-Install Minikube</a></li>
<li><a href="http://peihsinsu.blogspot.tw/2017/10/minikube-kubernetes.html">知識過客-使用 minikube 輕鬆上手 kubernetes</a></li>
<li><a href="https://www.youtube.com/watch?v=Q6g7w7Cmwlk">Train.IO - K8S</a></li>
<li><a href="https://kubernetes.io/docs/api-reference/v1.9/">kubernetes API 1.9</a></li>
</ul>
]]></content>
      <tags>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>Browser自動化測試工具Selenium</title>
    <url>/2017/10/21/Browser%E8%87%AA%E5%8B%95%E5%8C%96%E6%B8%AC%E8%A9%A6%E5%B7%A5%E5%85%B7_Selenium_%E5%88%9D%E9%AB%94%E9%A9%97/</url>
    <content><![CDATA[<h1 id="Browser自動化測試工具Selenium-Selenium-初體驗"><a href="#Browser自動化測試工具Selenium-Selenium-初體驗" class="headerlink" title="Browser自動化測試工具Selenium - Selenium 初體驗"></a>Browser自動化測試工具Selenium - Selenium 初體驗</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 前幾天與Software部門在進行測試網站某個功能性(每秒瀏灠一次網頁,共進行100次,查看第幾次開始得到http status code:403),因為我們部門長期都是使用Command-Line工作,因此為了方便用Shell Script簡單寫一個測試程式,測試結果與software部們不相同,了解之後,才知道他們是使用Browser 用手點方式測試。為了雙方測試環境一致性及客觀地顯示測試數據,本人有一個想法是否有支援程序化工具來控制Firefox或Chrome,經Google之後,很多網路上都推薦使用 <strong>Selenium</strong>,這項自動化測試工具。</p>
<h2 id="建置selenium環境"><a href="#建置selenium環境" class="headerlink" title="建置selenium環境"></a>建置selenium環境</h2><ul>
<li>這邊範例使用 Windows 系統(win7 或 Win10 都可)</li>
<li>這邊範例使用Python語言,Windows 預設沒有安裝Python,<a href="https://www.python.org/downloads/release/python-363/">需要下載Python</a>,選擇對應平台(x86 或 x86_64),下載後,執行下一步下一步的安裝方式,這邊就不展示。</li>
<li>開啟命令提示字元, 打上 py 或 python,有跑出類似以下畫面表示python 安裝成功。<br><img src="https://i.imgur.com/eQzPen8.png" alt="py_windows"></li>
<li>安裝selenium。預設python 3 已有<strong>pip</strong>安裝python 第三方套件管理程式。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure></li>
<li>分別下載Firefox及Chrome的webdriver,為了方便使用,下載完放置在c:\<ul>
<li>Chrome的Webdriver <a href="https://sites.google.com/a/chromium.org/chromedriver/downloads%22target=%22_blank">ChromeDriver - WebDriver for Chrome</a></li>
<li>Firefox的Webdriver <a href="https://github.com/mozilla/geckodriver/releases%22target=%22_blank">Mozilla_geckodriver</a></li>
</ul>
</li>
</ul>
<h2 id="簡單執行自動執行Chrome"><a href="#簡單執行自動執行Chrome" class="headerlink" title="簡單執行自動執行Chrome"></a>簡單執行自動執行Chrome</h2><ul>
<li>chromeDemo.py<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">chrome_path=<span class="string">&quot;c:\chromedriver.exe&quot;</span></span><br><span class="line">web=webdriver.Chrome(chrome_path)</span><br><span class="line">web.set_window_position(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">web.set_window_size(<span class="number">700</span>,<span class="number">700</span>)</span><br><span class="line">web.get(<span class="string">&#x27;http://www.google.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(web.current_url)</span><br><span class="line">time.sleep(<span class="number">15</span>)</span><br><span class="line">web.close()</span><br></pre></td></tr></table></figure></li>
<li>在命令提示字元 執行 chromeDemo.py<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c:\&gt;py chromeDemo.py</span><br></pre></td></tr></table></figure>
<h2 id="簡單執行自動執Firefox"><a href="#簡單執行自動執Firefox" class="headerlink" title="簡單執行自動執Firefox"></a>簡單執行自動執Firefox</h2></li>
<li>firefoxdemo.py<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">Firefox_path=<span class="string">&quot;c:\geckodriver.exe&quot;</span></span><br><span class="line">web=webdriver.Firefox(executable_path=Firefox_path)</span><br><span class="line">web.set_window_position(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">web.set_window_size(<span class="number">700</span>,<span class="number">700</span>)</span><br><span class="line">ActionChains(web).key_down(Keys.F12).key_up(Keys.F12).perform()</span><br><span class="line">web.get(<span class="string">&#x27;http://www.google.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(web.current_url)</span><br><span class="line">time.sleep(<span class="number">15</span>)</span><br><span class="line">web.close()</span><br></pre></td></tr></table></figure></li>
<li>在命令提示字元 執行 firefoxdemo.py<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c:\&gt;py firefoxdemo.py</span><br></pre></td></tr></table></figure>
<h2 id="範例-持續點擊某個網址"><a href="#範例-持續點擊某個網址" class="headerlink" title="範例 - 持續點擊某個網址"></a>範例 - 持續點擊某個網址</h2>以下使用chrome drive 來開啟Chrome Browser,並設定 Proxy相關設定(這邊我的內網有一台proxy： <a href="http://192.168.160.17:8082)之後,每隔1秒持續點擊">http://192.168.160.17:8082)之後,每隔1秒持續點擊</a> <a href="http://ifconfig.io/">ifconfig.io</a><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">PROXY=<span class="string">&#x27;http://192.168.160.17:8082&#x27;</span></span><br><span class="line"></span><br><span class="line">webdriver.DesiredCapabilities.CHROME[<span class="string">&#x27;proxy&#x27;</span>]=&#123;</span><br><span class="line">    <span class="string">&quot;httpProxy&quot;</span>: PROXY,</span><br><span class="line">    <span class="string">&quot;ftpProxy&quot;</span>: PROXY,</span><br><span class="line">    <span class="string">&quot;sslProxy&quot;</span>: PROXY,</span><br><span class="line">    <span class="string">&quot;proxyType&quot;</span>: <span class="string">&quot;MANUAL&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">chrome_path=<span class="string">&quot;./chromedriver.exe&quot;</span></span><br><span class="line"><span class="keyword">with</span> webdriver.Chrome(chrome_path) <span class="keyword">as</span> web:</span><br><span class="line">    web.set_window_position(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    web.set_window_size(<span class="number">700</span>,<span class="number">700</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">      web.get(<span class="string">&#x27;http://ifconfig.io&#x27;</span>)</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;, URL: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i,web.current_url))</span><br><span class="line">      time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h2 id="影片展示自動執行Firefox及Chrome"><a href="#影片展示自動執行Firefox及Chrome" class="headerlink" title="影片展示自動執行Firefox及Chrome"></a>影片展示自動執行Firefox及Chrome</h2></li>
<li><a href="http://goo.gl/27U9PC">for Firefox</a></li>
<li><a href="http://goo.gl/r6i1V7">for Chrome</a><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></li>
<li><a href="http://www.seleniumhq.org/">英文-SeleniumHQ-官方</a></li>
<li><a href="https://www.selenium.dev/documentation/en/webdriver/http_proxies/">英文-Selenium_Http proxies</a></li>
<li><a href="http://selenium-python-zh.readthedocs.io/en/latest/index.html">Selenium with Python中文翻譯文檔</a></li>
<li><a href="http://blog.csdn.net/xie_0723/article/details/51437650">Python Selenium 常用方法總結</a></li>
<li><a href="http://jialin128.pixnet.net/blog/post/114056630-%5Bpython%5D--%E4%BD%BF%E7%94%A8selenium%E5%9C%A8google-chrome%E7%80%8F%E8%A6%BD%E5%99%A8">[Python] 使用Selenium在Google Chrome瀏覽器</a></li>
<li><a href="http://zwindr.blogspot.tw/2016/07/python-selenium.html">[Python] Selenium 教學 </a></li>
<li><a href="http://risker0930.pixnet.net/blog/post/93522422-%E5%9C%A8chrome%E4%B8%8A%E9%9D%A2%E4%BD%BF%E7%94%A8selenium-webdriver">在Chrome上面使用Selenium WebDriver</a></li>
<li><a href="http://pala.tw/python-web-crawler/">Python爬蟲新手筆記</a></li>
</ul>
]]></content>
      <tags>
        <tag>Selenium</tag>
        <tag>Python</tag>
        <tag>爬蟲</tag>
      </tags>
  </entry>
  <entry>
    <title>First Hexo</title>
    <url>/2021/04/17/First-Hexo/</url>
    <content><![CDATA[<h2 id="Install-nvm"><a href="#Install-nvm" class="headerlink" title="Install nvm"></a>Install nvm</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash</span><br><span class="line"><span class="built_in">command</span> -v nvm</span><br><span class="line"><span class="built_in">which</span> nvm</span><br><span class="line">nvm ls</span><br><span class="line">nvm current</span><br></pre></td></tr></table></figure>
<h2 id="Install-node-by-nvm"><a href="#Install-node-by-nvm" class="headerlink" title="Install node by nvm"></a>Install node by nvm</h2><p>安裝長期支援的版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install --lts</span><br></pre></td></tr></table></figure>
<h2 id="Install-Hexo-by-npm"><a href="#Install-Hexo-by-npm" class="headerlink" title="Install  Hexo by npm"></a>Install  Hexo by npm</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<h2 id="First-Hexo"><a href="#First-Hexo" class="headerlink" title="First Hexo"></a>First Hexo</h2><h3 id="簡單建立一個MyBlog"><a href="#簡單建立一個MyBlog" class="headerlink" title="簡單建立一個MyBlog"></a>簡單建立一個MyBlog</h3><ul>
<li><p>建立一個MyBlog</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br><span class="line">hexo init  MyBlog</span><br></pre></td></tr></table></figure></li>
<li><p>簡單建立一篇文章叫做 First Hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;First-Hexo&quot;</span></span><br></pre></td></tr></table></figure>
<p>會這此目錄下 source/_posts/ 生成 First-Hexo.md</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source&#x2F;_posts&#x2F;First-Hexo.md</span><br></pre></td></tr></table></figure></li>
<li><p>輸出靜態頁面<br>會在此目錄下 MyBlog/public/ 生成html靜態頁面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>
<p>或是使用簡碼</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></li>
<li><p>瀏覽生成頁面<br>hexo 預設自帶web server ; Listen Port: 4000 ; <a href="http://localhost:4000/">http://localhost:4000</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br><span class="line"><span class="comment">###或是使用簡碼也可</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<h3 id="更換theme"><a href="#更換theme" class="headerlink" title="更換theme"></a>更換theme</h3><p>hexo 網路上推薦 <a href="https://github.com/theme-next/hexo-theme-next">NexT</a></p>
</li>
<li><p>install NexT</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> MyBlog</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></li>
<li><p>修正網站設定 - theme<br>搜尋關鍵字 <strong>theme</strong> ,將預設 landscape -&gt; next<br>MyBlog/_config.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">##theme: landscape</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>
<h3 id="有RSS功能"><a href="#有RSS功能" class="headerlink" title="有RSS功能"></a>有RSS功能</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>
<h3 id="發佈到GitPage"><a href="#發佈到GitPage" class="headerlink" title="發佈到GitPage"></a>發佈到GitPage</h3></li>
<li><p>發佈之前, 需要安裝hexo Plugin - <strong>hexo-deployer-git</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git –save</span><br></pre></td></tr></table></figure></li>
<li><p>編輯 _config.yml ,到deploy 區段增加 repo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;Token@github.com&#x2F;&lt;UserName&gt;&#x2F;&lt;UserName&gt;.github.io.git</span><br><span class="line">  ##repo: https:&#x2F;&#x2F;github.com&#x2F;&lt;Username&gt;&#x2F;&lt;UserName&gt;.github.io.git -- old</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2021/08/13 GitHub開始使用新的認證方式(Token,SSH),使用舊有認證會有錯誤訊息<br>remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.<br>remote: Please see <a href="https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/">https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/</a> for more informat</p>
</blockquote>
</li>
<li><p>開始發佈到GitHub</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo deploy</span><br><span class="line"><span class="comment">###或是使用簡碼也可</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><ul>
<li><a href="https://zespia.tw/blog/2012/10/11/hexo-debut/">hexo發源地-Hexo 颯爽登場</a></li>
<li><a href="https://ithelp.ithome.com.tw/users/20119486/ironman/2944">第 12 屆 iT 邦幫忙鐵人賽-試著學 Hexo 系列</a></li>
<li><a href="https://titangene.github.io/article/nvm.html">nvm：安裝、切換不同 Node.js 版本的管理器</a></li>
<li><a href="https://hexo.io/zh-tw/docs/">官網-Hexo Docs</a></li>
<li><a href="https://www.muji.dev/2020/02/16/hexo-github-page/">使用 Hexo 搭配 Github Page 建置自己的部落格</a></li>
<li><a href="https://hackmd.io/@king87515/Sy16ckymU">Git+Hexo-架設個人靜態網站</a></li>
<li><a href="https://myctw.github.io/post/bd72.html">Mac 上改變 Git 認證模式</a></li>
<li><strong>石頭的coding之路-Hexo</strong><ul>
<li><a href="https://isdaniel.github.io/github-hexo-appveyor/">建立自己Blog系列(一) 介紹 Github (hosting) + Hexo (Blog) + Appveyor(CICD)</a></li>
<li><a href="https://isdaniel.github.io/hexo-github-setting/">建立自己Blog系列(二) github Setting</a></li>
<li><a href="https://isdaniel.github.io/hexo-blog-theme/">建立自己Blog系列(三) Hexo next theme 介紹</a></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-Simple-parallel</title>
    <url>/2018/04/01/Python-Simple-parallel/</url>
    <content><![CDATA[<h2 id="Python-multiprocessing"><a href="#Python-multiprocessing" class="headerlink" title="Python - multiprocessing"></a>Python - multiprocessing</h2><p>大部分程式都是由上到下依序執行,若一個程式花費需要5秒,批示執行8次,理論是應該須40秒時間。現在CPU都是多核心,假設有一個8 core的CPU,將執行8次花費5秒的程式,分配到每個核心並行執行,理論上應該只要5秒就可完成工作。Python 標準函式庫 就有 multiprocessing 可達到此目的。</p>
<h2 id="Python-Demo-1"><a href="#Python-Demo-1" class="headerlink" title="Python Demo 1"></a>Python Demo 1</h2><p>1.ping 5次 (循序方式,於雙核CPU) ;測出約8秒</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python                                                                                                                 </span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">def job1(url):</span><br><span class="line">    tmpstr&#x3D;&quot;ping -c 5  &quot;+str(url)</span><br><span class="line">    os.system(tmpstr)</span><br><span class="line"></span><br><span class="line">if __name__&#x3D;&#x3D;&#39;__main__&#39;:</span><br><span class="line">    job1(&quot;8.8.8.8&quot;)</span><br><span class="line">    job1(&quot;8.8.4.4&quot;)</span><br></pre></td></tr></table></figure>


<p>2.ping 5次 (<strong>並行方式</strong>,於雙核CPU);測出約4秒</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python                                                                                                                 </span><br><span class="line">import multiprocessing as mp</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">def job1(url):</span><br><span class="line">    tmpstr&#x3D;&quot;ping -c 5  &quot;+str(url)</span><br><span class="line">    os.system(tmpstr)</span><br><span class="line"></span><br><span class="line">if __name__&#x3D;&#x3D;&#39;__main__&#39;:</span><br><span class="line">    p1&#x3D;mp.Process(target&#x3D;job1,args&#x3D;(&quot;8.8.8.8&quot;,))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2&#x3D;mp.Process(target&#x3D;job1,args&#x3D;(&quot;8.8.4.4&quot;,))</span><br><span class="line">    p2.start()</span><br></pre></td></tr></table></figure>

<h2 id="Python-Demo-2-另一種Pool寫法"><a href="#Python-Demo-2-另一種Pool寫法" class="headerlink" title="Python Demo 2 ,另一種Pool寫法"></a>Python Demo 2 ,另一種Pool寫法</h2><p>1.一個工作睡3秒,執行5次。(循序方式,於雙核CPU) ;測出約15秒</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python                                                                                                                 </span><br><span class="line">from multiprocessing import Pool</span><br><span class="line">from time import sleep</span><br><span class="line"></span><br><span class="line">def task(argss):</span><br><span class="line">    print(str(argss) +&quot; start ... sleep&quot;)</span><br><span class="line">    sleep(3)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    for i in range(5):</span><br><span class="line">        task(i)</span><br></pre></td></tr></table></figure>

<p>2.一個工作睡3秒,執行5次。(<strong>並行方式</strong>,於雙核CPU) ;測出約9秒</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">from multiprocessing import Pool</span><br><span class="line">from time import sleep</span><br><span class="line">                                                                                                                                    </span><br><span class="line">def task(argss):</span><br><span class="line">    print(str(argss) +&quot; start ... sleep&quot;)</span><br><span class="line">    sleep(3)</span><br><span class="line">    </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    p&#x3D;Pool(2)</span><br><span class="line">    for i in range(5):</span><br><span class="line">        p.apply_async(task, args&#x3D;(i,))</span><br><span class="line">        </span><br><span class="line">    print(&#39;Waiting for all subprocesses..&#39;)</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    print(&#39;All Subprocess done ..&#39;)</span><br></pre></td></tr></table></figure>

<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://docs.python.org.tw/3/library/multiprocessing.html#module-multiprocessing">Python標準庫_multiprocessing</a></li>
<li><a href="filesystem:chrome-extension://oegnpmiddfljlloiklpkeelagaeejfai/temporary/9c5cbb04-be0a-4f65-b4c5-61b9bd7cd4c6/1487326368864_729/index.htm">Multiprocessing with Python</a></li>
<li><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431927781401bb47ccf187b24c3b955157bb12c5882d000">廖雪峰-多進程</a></li>
<li><a href="http://www.cnblogs.com/vamei/archive/2012/10/12/2721484.html#">Python標準庫10 多進程初步 (multiprocessing包)</a></li>
</ul>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>SSh-Reverse-Tunnel-RDP</title>
    <url>/2019/01/20/SSh-Reverse-Tunnel-RDP/</url>
    <content><![CDATA[<h1 id="使用ssh-Reverse-Tunnel-突破防火牆或NAT限制"><a href="#使用ssh-Reverse-Tunnel-突破防火牆或NAT限制" class="headerlink" title="使用ssh Reverse Tunnel 突破防火牆或NAT限制"></a>使用ssh Reverse Tunnel 突破防火牆或NAT限制</h1><ul>
<li><a href="#depolymap">架構圖</a></li>
<li><a href="#background">背景說明</a></li>
<li><a href="#stepbystep">實作說明</a></li>
<li><a href="#arduinoinfo">參考資料</a><h2 id="depolymap">架構圖</h2>
試想一個情況,公司區網有一部A主機可以對外連線上網都沒問題,可是這部A主機是在防火牆或NAT後端裡面,外部B主機是無法連到這部A主機。若不想在防火牆設定由外部 mapping A主機的話,就可以利用 SSH Reverse Tunnel。</li>
</ul>
<p><img src="https://i.imgur.com/wxn8PHY.jpg" alt="SSh Reverse Tunnel架構圖"></p>
<h2 id="background">背景說明</h2>
- 區域網的 A主機(windows ) 192.168.88.8 , 有開啟RDP(有開啟遠端桌面服務,僅在區域網路使用)
- 外部B主機(Linux,在Google GCP 租用的),35.221.139.139 (Public IP, 配合演示使用的),有開啟SSHD服務
- 本篇主要目的,要從 Google GCP 租用的外部B主機連到區域網路A主機RDP服務

<h2 id="stepbystep">實作說明</h2>
如上圖顯示紫色那一段為第1步,綠色為第2步。

<h3 id="第1步-先在A主機建立與B主機的Reverse-Tunnel連線"><a href="#第1步-先在A主機建立與B主機的Reverse-Tunnel連線" class="headerlink" title="第1步: 先在A主機建立與B主機的Reverse Tunnel連線"></a>第1步: 先在A主機建立與B主機的Reverse Tunnel連線</h3><p>A主機是Windows,用putty ssh 外部B主機</p>
<p><strong>填上外部B主機ip位址</strong><br><img src="https://i.imgur.com/7GwQ1M2.png" alt="填上外部B主機ip位址"></p>
<p><strong>填上Login帳號</strong><br><img src="https://i.imgur.com/WZF1bBO.png" alt="填上Login帳號"><br><strong>此步驟非必要的,此篇登入外部B主機是使用憑證方式</strong><br><img src="https://i.imgur.com/Fjr72mO.png" alt="此步驟非必要的,此篇登入外部B主機是使用憑證方式"><br><strong>最重要!!,設定reverse Tunnel</strong></p>
<ul>
<li>Source port:<strong>3389</strong>     表示給外部連線用的</li>
<li>Destination : <strong>127.0.0.1:3389</strong> 表示連線A主機內部服務<br><img src="https://i.imgur.com/gnP20m9.png" alt="此步驟非必要的,此篇登入外部B主機是使用憑證方式"></li>
</ul>
<p><strong>完成連線</strong></p>
<ul>
<li>表示已連線登入到外部B主機</li>
<li>紅色圈起來表示 上圖Source port部份<br><img src="https://i.imgur.com/KXxk0ql.png" alt="完成連線"></li>
</ul>
<h3 id="第2步-從B主機連線到內網A主機"><a href="#第2步-從B主機連線到內網A主機" class="headerlink" title="第2步: 從B主機連線到內網A主機"></a>第2步: 從B主機連線到內網A主機</h3><p><strong>使用freerdp這個套件連線 內網A主機rdp服務</strong><br><img src="https://i.imgur.com/7PUOZqq.png" alt="freerdp_connection"><br><strong>rdp Login</strong><br><img src="https://i.imgur.com/zz4uEA2.png" alt="rdp Login"><br><strong>用RDP 進入內網A主機</strong><br><img src="https://i.imgur.com/wym4YOO.png" alt="RDP A"></p>
<h2 id="arduinoinfo">參考資料</h2>

<ul>
<li><a href="https://newtoypia.blogspot.com/2016/08/reverse-ssh-tunneling.htm">鑿一個反向 ssh 隧道， 對朋友或世界展示筆電或家裡的某個服務</a></li>
<li><a href="https://ez3c.tw/2043">Reverse SSH Tunnel實際運用，搭配auotssh永不斷線，putty建立反向tunnel</a></li>
<li><a href="http://blog.creke.net/722.htm">SSH隧道與端口轉發及內網穿透</a></li>
</ul>
]]></content>
      <tags>
        <tag>資安</tag>
        <tag>Reverse-Tunnel</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask Config 載入方式</title>
    <url>/2017/11/08/base-Flask-Config-%E8%BC%89%E5%85%A5%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Flask-Config-載入方式"><a href="#Flask-Config-載入方式" class="headerlink" title="Flask Config 載入方式"></a>Flask Config 載入方式</h1><p>Flask config 內建變數很多,可以參考 官方<a href="http://flask.pocoo.org/docs/0.12/config/">Builtin Configuration Values</a>,中文翻譯可以參考<a href="http://python.usyiyi.cn/documents/flask_011_ch/config.html">內置的配置值</a>,這裡用<strong>DEBUG</strong>這個變數說明Config載入方。</p>
<h2 id="以簡單程式碼為範例說明"><a href="#以簡單程式碼為範例說明" class="headerlink" title="以簡單程式碼為範例說明"></a>以簡單程式碼為範例說明</h2><p>預設沒有指定<strong>DEBUG</strong>是表False,不開啟程式debug模式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app=Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;center&gt;&lt;h1&gt;Hello World&lt;/h1&gt;&lt;/center&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>
<p>執行之後可以看到 ,預設沒有debug模式。<br><img src="https://i.imgur.com/GgxpfGZ.png" alt="Flask_NO_Debug"></p>
<p>若有開啟debug模式,如下:<br><img src="https://i.imgur.com/7NDMAt1.png" alt="Flask_Debug"></p>
<ul>
<li>以陣列方式(寫在code裡)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app=Flask(__name__)</span><br><span class="line">...略...</span><br><span class="line">app.config[<span class="string">&quot;DEBUG&quot;</span>]=<span class="literal">True</span></span><br><span class="line">...略...</span><br></pre></td></tr></table></figure></li>
<li>加入參數到app.run()  (寫在code裡)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app=Flask(__name__)</span><br><span class="line">..略..</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li>
<li>以傳入模組物件方式 (寫在code裡)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app=Flask(__name__)</span><br><span class="line">...略...</span><br><span class="line">DEBUG=<span class="literal">True</span></span><br><span class="line">app.config.from_object(__name__)</span><br><span class="line">...略...</span><br></pre></td></tr></table></figure></li>
<li>以傳入模組物件方式 (寫在另一個檔案裡;config.py)<br>config.py<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DEBUG=<span class="literal">True</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app=Flask(__name__)</span><br><span class="line">...略...</span><br><span class="line">app.config.from_object(<span class="string">&#x27;config&#x27;</span>)</span><br><span class="line">...略...</span><br></pre></td></tr></table></figure>
或是也可這樣表示<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line">app=Flask(__name__)</span><br><span class="line">...略...</span><br><span class="line">app.config.from_object(<span class="string">&#x27;config&#x27;</span>)</span><br><span class="line">...略...</span><br></pre></td></tr></table></figure></li>
<li>透過檔案名稱方式載入<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app=Flask(__name__)</span><br><span class="line">...略...</span><br><span class="line">app.config.from_pyfile(<span class="string">&#x27;config.py&#x27;</span>)</span><br><span class="line">...略...</span><br></pre></td></tr></table></figure></li>
<li>透過系統的環境變數載入<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># export tt=&#x27;config.py&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app=Flask(__name__)</span><br><span class="line">...略...</span><br><span class="line">app.config.from_envvar(<span class="string">&#x27;tt&#x27;</span>)</span><br><span class="line">...略...</span><br></pre></td></tr></table></figure>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://www.youtube.com/watch?v=7RWro4VF_9c">Flask Configuration From Environment Variables-Pretty Printed</a></li>
<li><a href="https://www.youtube.com/watch?v=T86FkDhVH5A&t=381s">Flask Configuration</a></li>
</ul>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/12/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>基礎2：Flask URL 傳值</title>
    <url>/2018/06/17/base-Flask-app2/</url>
    <content><![CDATA[<h1 id="基礎：Flask-URL-傳值"><a href="#基礎：Flask-URL-傳值" class="headerlink" title="基礎：Flask URL 傳值"></a>基礎：Flask URL 傳值</h1><h2 id="url-傳值範例"><a href="#url-傳值範例" class="headerlink" title="url 傳值範例"></a>url 傳值範例</h2><p>demo2.py</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/home/&lt;id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index2</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;My Home in &#x27;</span>  +  <span class="built_in">id</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>  __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,port=<span class="number">8099</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h2 id="測試執行"><a href="#測試執行" class="headerlink" title="測試執行"></a>測試執行</h2><ul>
<li><p><a href="http://127.0.0.1:8099/home/Taichung">http://127.0.0.1:8099/home/Taichung</a></p>
<p>(回應) My Home in Taichung</p>
</li>
<li><p><a href="http://127.0.0.1:8099/home/Taipei">http://127.0.0.1:8099/home/Taipei</a></p>
<p>(回應) My Home in Taipei</p>
</li>
</ul>
<h2 id="參數類型"><a href="#參數類型" class="headerlink" title="參數類型"></a>參數類型</h2><p>標記的 <id> ,可以指定參數類型</p>
<ul>
<li>語法:<br>&lt;類型:id&gt;</li>
<li>類型:<ul>
<li>string:沒有接受 斜線的文字(預設)</li>
<li>int</li>
<li>float</li>
<li>path: 和預設一樣 ,但接受斜線</li>
<li>uuid</li>
<li>any: 指定多種路徑</li>
</ul>
</li>
</ul>
<h3 id="指定類型範例"><a href="#指定類型範例" class="headerlink" title="指定類型範例"></a>指定類型範例</h3><p>demo2-1.py</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/home/&lt;int:id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index2</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">    test=<span class="number">100</span> + <span class="built_in">id</span></span><br><span class="line">    test=<span class="built_in">str</span>(test)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Google Number: &#x27;</span>  +  test</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&lt;any(Taichung,Taipei,AAA,BBB):lo&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index3</span>(<span class="params">lo</span>):</span></span><br><span class="line">    <span class="keyword">return</span>    <span class="string">&#x27;My Home is in &#x27;</span> +  lo</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>  __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,port=<span class="number">8099</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h3 id="指定類型執行"><a href="#指定類型執行" class="headerlink" title="指定類型執行"></a>指定類型執行</h3><ul>
<li><p><a href="http://127.0.0.1:8099/home/1234">http://127.0.0.1:8099/home/1234</a></p>
<p>(回應) Google Number: 1334</p>
</li>
<li><p><a href="http://127.0.0.1:8099/home/aaa">http://127.0.0.1:8099/home/aaa</a></p>
<p>(回應) 404  Not Found</p>
</li>
<li><p><a href="http://127.0.0.1:8099/Taichung">http://127.0.0.1:8099/Taichung</a></p>
<p>(回應) My Home is in Taichung</p>
</li>
<li><p><a href="http://127.0.0.1:8099/Taipei">http://127.0.0.1:8099/Taipei</a></p>
<p>(回應) My Home is in Taipei</p>
</li>
<li><p><a href="http://127.0.0.1:8099/AAA">http://127.0.0.1:8099/AAA</a></p>
<p>(回應) My Home is in AAA</p>
</li>
<li><p><a href="http://127.0.0.1:8099/BBB">http://127.0.0.1:8099/BBB</a></p>
<p>(回應) My Home is in BBB</p>
</li>
<li><p><a href="http://127.0.0.1:8099/AAABBB">http://127.0.0.1:8099/AAABBB</a><br>(回應) 404  Not Found</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>基礎1：Flask 建立一個app</title>
    <url>/2018/06/17/base-Flask-app1/</url>
    <content><![CDATA[<h1 id="基礎：Flask-建立一個app"><a href="#基礎：Flask-建立一個app" class="headerlink" title="基礎：Flask 建立一個app"></a>基礎：Flask 建立一個app</h1><h2 id="簡單範例-Hello-World"><a href="#簡單範例-Hello-World" class="headerlink" title="簡單範例 Hello World"></a>簡單範例 Hello World</h2><p>demo.py</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&lt;h1&gt;Hello World&lt;/h1&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/home&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index2</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;My Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>  __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,port=<span class="number">8099</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h2 id="啟動"><a href="#啟動" class="headerlink" title="啟動"></a>啟動</h2><p>啟動一個 web 服務, listen 127.0.0.1:8099</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./demo.py</span><br><span class="line">或是 python3 demo.py</span><br></pre></td></tr></table></figure>

<h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>在Browser 測試兩個網址,看看會回應什麼變化。</p>
<ul>
<li><a href="http://127.0.0.1:8099/">http://127.0.0.1:8099</a></li>
<li><a href="http://127.0.0.1:8099/home">http://127.0.0.1:8099/home</a></li>
<li><a href="http://127.0.0.1:8099/home/">http://127.0.0.1:8099/home/</a></li>
</ul>
<h2 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h2><ul>
<li> Flask 類 傳入的參數  ‘<strong>name</strong>‘ ,表示 程式的根目錄</li>
<li> @app.route  裝飾器  將 url  與   視圖函數(View)   def index()  關聯到 app.url_map 屬性上 。處理 url  與 視圖函數的過程稱為路由(route)</li>
<li> app.run 使用 Python 標準函數  BaseHTTPServer.HTTPServer 啟動一個 web 服務。有 host , port , debug 等諸多參數</li>
<li> Flask 使用  唯一URL 。   使用 curl  <a href="http://127.0.0.1:8099/home">http://127.0.0.1:8099/home</a>  (回 http stat code  200)  與  curl  <a href="http://127.0.0.1:8099/home/">http://127.0.0.1:8099/home/</a>   (回http stat code 404)   回應結果不同。</li>
</ul>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>基礎3：Flask Jinja2 模板引擎</title>
    <url>/2018/10/13/base-Flask-template-app3/</url>
    <content><![CDATA[<h1 id="基礎：Flask-Jinja2-模板引擎"><a href="#基礎：Flask-Jinja2-模板引擎" class="headerlink" title="基礎：Flask Jinja2 模板引擎"></a>基礎：Flask Jinja2 模板引擎</h1><h2 id="本範例程式的目錄結構-使用python3-x"><a href="#本範例程式的目錄結構-使用python3-x" class="headerlink" title="本範例程式的目錄結構 (使用python3.x)"></a>本範例程式的目錄結構 (使用python3.x)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── hello.py</span><br><span class="line">└── templates</span><br><span class="line">    ├── base.html</span><br><span class="line">    ├── test2.html</span><br><span class="line">    ├── test.html</span><br><span class="line">    └── user.html</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="在Jinja2-變數的表示"><a href="#在Jinja2-變數的表示" class="headerlink" title="在Jinja2 變數的表示"></a>在Jinja2 變數的表示</h3><ul>
<li>hello.py<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;user.html&#x27;</span>, name=name)</span><br></pre></td></tr></table></figure></li>
<li>user.html<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;&#123; name &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="在Jinja2-變數過濾器"><a href="#在Jinja2-變數過濾器" class="headerlink" title="在Jinja2 變數過濾器"></a>在Jinja2 變數過濾器</h3></li>
<li><a href="http://jinja.pocoo.org/docs/2.10/templates/#builtin-filters%22target=%22_blank">[Jinja2 官方的過濾清單]</a></li>
<li>呈上一的變數的表示, hello.py不變;只更改 <strong>templates/user.html</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>第一個字元大寫,其餘小寫: &#123;&#123; name|capitalize &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>第一個字元大寫: &#123;&#123; name|title &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>全部字元小寫: &#123;&#123; name|lower &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>全部字元大寫: &#123;&#123; name|upper &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>變數name2 未定義,顯示預定字串: &#123;&#123; name2|default(&#x27;the name2 is not defined&#x27;) &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>變數為空值時,顯示預定字串: &#123;&#123; &#x27;&#x27;|default(&#x27;the string was empty&#x27;,true) &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>刪除前後空白字元: &#123;&#123; &#x27;   Hello~~~   &#x27;|trim &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>未移除HTML標籤: &#123;&#123; &#x27;<span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>Hello ha<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>&#x27; &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>轉譯前移除HTML標籤: &#123;&#123; &#x27;<span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>Hello ha<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>&#x27;|striptags &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>轉譯前移除HTML標籤,並再轉大寫字元: &#123;&#123; &#x27;<span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>Hello ha<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>&#x27;|striptags|upper &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="在Jinja2-控制結構"><a href="#在Jinja2-控制結構" class="headerlink" title="在Jinja2 控制結構"></a>在Jinja2 控制結構</h3></li>
<li>只更改 <strong>templates/user.html</strong>,並刪除之前的內容。判斷name 變數的值是否為andy,正確返回 hello andy ; 反之,返回 Hello EveryBody<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if name==&quot;andy&quot; %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> Hello &#123;&#123; name &#125;&#125; !!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> Hello EveryBody !!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li>
<li>迴圈控制。修改<strong>hello.py</strong> 及 <strong>templates/test.html</strong>, 在hello.py 製造一個串列,將它帶往模板的迴圈來處理。</li>
</ul>
<p><strong>hello.py</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/array/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arrayt</span>():</span></span><br><span class="line">    commit=[ <span class="string">&#x27;test&#x27;</span>+<span class="built_in">str</span>(xx) <span class="keyword">for</span> xx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>)]</span><br><span class="line">    <span class="keyword">return</span>  render_template(<span class="string">&#x27;test.html&#x27;</span>,commit=commit)</span><br></pre></td></tr></table></figure>
<p><strong>templates/test.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% for item  in commit %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Hello, &#123;&#123; item &#125;&#125;!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Jinja2 模板引擎也有函數結構,稱為 macro。增加以下內容到 <strong>templates/test.html</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% macro tempf(item) %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>from macro : &#123;&#123; item &#125;&#125;!!!&lt;/li!&gt;</span><br><span class="line">&#123;% endmacro %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% for item  in commit %&#125;</span><br><span class="line">    &#123;&#123; tempf(item) &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>呈上一個macro 範例,使用像是 python import用法,將macro 函數寫在 <strong>template/test2.html</strong>, 修改<strong>template/test.html</strong>在匯入 test2.html。</li>
</ul>
<p>增加以下 到 <strong>template/test2.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% macro tempf(item) %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>from macro with import : &#123;&#123; item &#125;&#125;!!!&lt;/li!&gt;</span><br><span class="line">&#123;% endmacro %&#125;</span><br></pre></td></tr></table></figure>

<p>修改 <strong>template/test.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% import &quot;test2.html&quot; as testmacro %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  &#123;% for item in commit %&#125;</span><br><span class="line">      &#123;&#123; testmacro.tempf(item) &#125;&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Jinja2-模板繼承"><a href="#Jinja2-模板繼承" class="headerlink" title="Jinja2 模板繼承"></a>Jinja2 模板繼承</h3><p>網頁是由html head ,body 等標籤兩兩成對構成,通常程式回應結果只在body 區塊有所變更,沒有必要重新將相同內容放置同一個模板中,因此可以使用模板繼承方式將基礎的模板匯進來。</p>
<ul>
<li>基礎模板: <strong>template/base.html</strong> ; 在 <strong>template/user.html</strong>繼承基礎模板。基礎模板劃分 , head 區塊(),head 裡面 title 區塊, 及 body 區塊,現在只要改變body區塊</li>
</ul>
<p>增加以下內容 至 <strong>template/base.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    &#123;% block head %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span> &#123;% block title %&#125;who 123&#123;% endblock %&#125;  <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% block body %&#125;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修正內容 <strong>template/user.html</strong>,使用extends 繼承 base.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;&#123; name &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>若要在head區塊增加 一個 <strong>meta 標籤</strong>,及改變一個<strong>tile 區塊內容</strong></li>
</ul>
<p>修正內容 <strong>template/user.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line">&#123;% block title %&#125;Title Change &#123;&#123; name &#125;&#125;&#123;% endblock %&#125;</span><br><span class="line">&#123;% block head %&#125;</span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;&#123; name &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>
<p>瀏覽結果發現,網頁title 標題不見。這是因為 title 區塊位於 head 區塊內,也就是說title 是head區塊的內容;當增加<strong>meta 標籤</strong>就會覆蓋掉原本的title 的內容。要解決此問題,只要 head 區塊在增加一個 super();表示再次引用 base.html 基礎模板中的 head 區塊內容。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line">&#123;% block title %&#125;Title Change &#123;&#123; name &#125;&#125;&#123;% endblock %&#125;</span><br><span class="line">&#123;% block head %&#125;</span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"> &#123;&#123;super()&#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;&#123; name &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><ul>
<li><a href="https://www.tenlong.com.tw/products/9789864768684">Flask 網頁開發, 2/e第三章</a></li>
<li><a href="http://docs.jinkan.org/docs/jinja2/templates.html#id19">Jinja2 中文 DOC</a></li>
</ul>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>ACL For Nginx</title>
    <url>/2017/06/18/2017-06-18_ACL-For-Nginx/</url>
    <content><![CDATA[<h1 id="ACL-For-Nginx-目錄"><a href="#ACL-For-Nginx-目錄" class="headerlink" title="ACL For Nginx - 目錄"></a>ACL For Nginx - 目錄</h1><ul>
<li><p><a href="#%E5%89%8D%E8%A8%80">前言</a></p>
</li>
<li><p><a href="#config">配置設定檔</a></p>
</li>
<li><p><a href="#test">測試</a></p>
</li>
<li><p><a href="#reference">參考資料</a></p>
<h2 id="前言">前言</h2>
利用Nginx 建立一個簡單的存取控制列表。假設我要阻擋從SG(新加坡)及TW(台灣)來的IP訪問Nginx,另外開放指定的台灣IP訪問Nginx。以下是本篇要使用的材料:</li>
<li><p><strong>Linux 平台 Centos6 x86_64</strong></p>
</li>
<li><p><strong><a href="http://tengine.taobao.org/%22target=%22_blank">Tengine</a></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Tengine 是由淘寶網改寫Nginx,而釋放出來的原始碼版本。設定即使用與官方Nginx一樣。 </span><br></pre></td></tr></table></figure></li>
<li><p><strong><a href="http://nginx.org/en/docs/http/ngx_http_geoip_module.html%22target=%22_blank">ngx_http_geoip_module.so 模組</a></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">geoip此模組功用是利用Maxmind GeoIP2資料檔來識別來源IP是屬於哪個國家(ex: TW, US, JP,SG,RU,CN...等等)</span><br></pre></td></tr></table></figure></li>
<li><p><strong><a href="https://github.com/openresty/lua-nginx-module/blob/master/README.markdown#installation%22target=%22_blank">ngx_http_lua_module.so 模組</a></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Lua是一套輕巧,執行效率高的script語言。需多應用程式利用Lua作為自己的嵌入式手稿語言,加入此模組之後,Nginx就可在設定檔中撰寫Lua做些邏輯性的控制。 </span><br></pre></td></tr></table></figure>
<h2 id="config">配置設定檔</h2>
這邊不會將全部設定檔寫出來,只會寫與本篇相關設定及參數,並顯示設定檔的相對位置。</li>
</ul>
<h5 id="載入Lua-及-Geoip-模組"><a href="#載入Lua-及-Geoip-模組" class="headerlink" title="載入Lua 及 Geoip 模組"></a>載入Lua 及 Geoip 模組</h5><ul>
<li>將Lua及 Geoip 放置在此路徑下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;nginx&#x2F;modules&#x2F;</span><br><span class="line">├── ngx_http_geoip_module.so</span><br><span class="line">└── ngx_http_lua_module.so</span><br></pre></td></tr></table></figure></li>
<li>在此檔案 /etc/nginx/nginx.conf 修改 Nginx設定檔<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dso &#123; </span><br><span class="line">      path &#x2F;etc&#x2F;nginx&#x2F;modules&#x2F;;</span><br><span class="line">       load ngx_http_lua_module.so;</span><br><span class="line">       load ngx_http_geoip_module.so;</span><br><span class="line">&#125;</span><br><span class="line">http&#123;</span><br><span class="line">...</span><br><span class="line">server &#123;</span><br><span class="line">   location &#x2F; &#123;</span><br><span class="line">   .....</span><br><span class="line">   &#125;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>利用以下指令 reload Ninx 及 顯示模組是否有被載入<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@andy]#nginx -t  &amp;&amp; &#x2F;etc&#x2F;init.d&#x2F;nginx reload</span><br><span class="line">[root@andy]#nginx -m</span><br><span class="line">Tengine version: Tengine&#x2F;2.1.0 (nginx&#x2F;1.6.2)</span><br><span class="line">loaded modules:</span><br><span class="line">...</span><br><span class="line">ngx_http_lua_module (shared, 3.1)</span><br><span class="line">ngx_http_geoip_module (shared, 3.1)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h5 id="在此檔案-etc-nginx-nginx-conf-修改Geoip-及-開放IP等設定"><a href="#在此檔案-etc-nginx-nginx-conf-修改Geoip-及-開放IP等設定" class="headerlink" title="在此檔案 /etc/nginx/nginx.conf 修改Geoip 及 開放IP等設定"></a>在此檔案 /etc/nginx/nginx.conf 修改Geoip 及 開放IP等設定</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    #Maxmind GeoIP2資料檔</span><br><span class="line">    geoip_country &#x2F;usr&#x2F;local&#x2F;share&#x2F;GeoIP&#x2F;GeoIP.dat;</span><br><span class="line"></span><br><span class="line">    # 將阻擋國家簡碼寫在此。 0表阻擋 ; 1 表示開放預設值</span><br><span class="line">    map $geoip_country_code $chek_flag</span><br><span class="line">    &#123;</span><br><span class="line">     default 1;</span><br><span class="line">     SG  0;</span><br><span class="line">     TW  0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   # 將要開放IP寫在此。  1 表示開放 ; 0為預設值不開放。</span><br><span class="line">    geo $whitelist&#123;</span><br><span class="line">            default 0;</span><br><span class="line">            116.241.114.0&#x2F;24 1; #這是某個台灣IP</span><br><span class="line">    &#125;</span><br><span class="line">server &#123;</span><br><span class="line">   location &#x2F; &#123;</span><br><span class="line">   .....</span><br><span class="line">   &#125;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="使用Lua-模組做流程控制"><a href="#使用Lua-模組做流程控制" class="headerlink" title="使用Lua 模組做流程控制"></a>使用Lua 模組做流程控制</h5></li>
<li>要修改的設定檔<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;</span><br><span class="line">├── 1-showip.conf</span><br><span class="line">└── showip.lua</span><br></pre></td></tr></table></figure></li>
<li>修改此設定檔 /etc/nginx/conf.d/1-showip.conf<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">...</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  ip2.aligogo.pw;</span><br><span class="line">    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;showip-access.log  main;</span><br><span class="line">    error_log   &#x2F;var&#x2F;log&#x2F;nginx&#x2F;showip-error.log;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        default_type text&#x2F;html;</span><br><span class="line">        #lua 流程控制寫在此,showip.lua</span><br><span class="line">        content_by_lua_file &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;showip.lua;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location &#x2F;showcode &#123;</span><br><span class="line">        default_type text&#x2F;html;       </span><br><span class="line">        content_by_lua &#39;ngx.say(&quot;&lt;center&gt;&lt;h1&gt;&quot;,ngx.var.geoip_country_code,&quot; &quot;,ngx.var.remote_addr,&quot;&lt;&#x2F;h1&gt;&lt;&#x2F;center&gt;&quot;)&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    #error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">    location &#x3D; &#x2F;50x.html &#123; root  &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>修改此設定檔 /etc/nginx/conf.d/showip.lua<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 指定要允許ip的判斷。</span><br><span class="line">if ngx.var.whitelist &#x3D;&#x3D; &quot;1&quot; then</span><br><span class="line">-- 秀ip 及國碼</span><br><span class="line">    ngx.exec(&#39;&#x2F;showcode&#39;);</span><br><span class="line">end</span><br><span class="line">-- 阻擋國家的判斷。</span><br><span class="line">if ngx.var.chek_flag  &#x3D;&#x3D; &quot;0&quot; then</span><br><span class="line">        ngx.exit(ngx.HTTP_FORBIDDEN)</span><br><span class="line">end</span><br><span class="line">--  以上沒被判斷到的</span><br><span class="line">ngx.exec(&#39;&#x2F;showcode&#39;);</span><br></pre></td></tr></table></figure></li>
<li>reload Nginx<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@andy]#nginx -t  &amp;&amp; &#x2F;etc&#x2F;init.d&#x2F;nginx reload</span><br></pre></td></tr></table></figure>
<h2 id="test">測試</h2></li>
<li>測試阻擋SG新加坡IP<br><img src="https://i.imgur.com/Tgqp7rz.png" alt="test_SG"></li>
<li>測試開放指定TW IP<br><img src="https://i.imgur.com/RTCyFfd.png" alt="test_TW"></li>
</ul>
<h2 id="reference">參考資料</h2>
- [Nginx Doc](http://nginx.org/en/docs/)
- [tengine](http://tengine.taobao.org/)
- [Nginx使用GeoIP2的拓展模塊處理不同國家的訪問](https://idoseek.com/1774)
- [GeoIP2 Downloadable Databases](http://dev.maxmind.com/geoip/geoip2/downloadable/)
- [openresty_lua-nginx-module](https://github.com/openresty/lua-nginx-module/blob/master/README.markdown)
- [Lua-wiki](https://zh.wikipedia.org/wiki/Lua)
]]></content>
      <tags>
        <tag>NGINX</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx_Fastcgi_Cache + Lua 執行過程</title>
    <url>/2016/06/19/2016-06-19_Nginx-Fastcgi-Cache-Lua/</url>
    <content><![CDATA[<h1 id="Nginx-Proxy-Cache"><a href="#Nginx-Proxy-Cache" class="headerlink" title="Nginx Proxy Cache"></a>Nginx Proxy Cache</h1><ul>
<li>應用於Reverse Proxy,負載均衡</li>
<li>作用是緩存後端服務器的內容，可能是任何內容，包括靜態的和動態</li>
<li>另外,也可作正向代理 (Nginx 這邊支援 web proxy)</li>
</ul>
<p><img src="https://i.imgur.com/I7GPScQ.jpg" alt="Nginx_Proxy_Cache"></p>
<h1 id="Nginx-Fastcgi-Cache"><a href="#Nginx-Fastcgi-Cache" class="headerlink" title="Nginx Fastcgi Cache"></a>Nginx Fastcgi Cache</h1><ul>
<li>proxy_cache 與 fastcgi_cache功能大至一樣。</li>
<li>用是緩存fastcgi生成的內容，很多情況是php生成的動態的內容。</li>
<li>緩存作用。減少了nginx與Application(php,python,cgi等等)通信的次數。</li>
</ul>
<p><img src="https://i.imgur.com/HeZ5oyT.jpg" alt="Nginx_Fastcgi_Cache"></p>
<h1 id="Nginx-Cache-運作流程"><a href="#Nginx-Cache-運作流程" class="headerlink" title="Nginx Cache 運作流程"></a>Nginx Cache 運作流程</h1><p>Nginx 除了 work Process 管理 Http Request 請求等其他工作外,Nginx Cache 也由另外程序來作管理。</p>
<ol>
<li>Nginx Cache loader</li>
</ol>
<ul>
<li>主要Nginx 一開始初始化時,有呼叫Nginx Cache 相關模組,Nginx master process 會 fork Nginx Cache loader 去抓取 Nginx Cache Store(cache 儲存區),來重新建立索引(hash key)並存放在memory 中,<pre><code>     建立完成後, Cache loader process 就隨即結束。
</code></pre>
</li>
</ul>
<ol start="2">
<li>Nginx Cache mamager</li>
</ol>
<ul>
<li>主要接受 master process 指令 去管理 Nginx Cache 大小事務,像是 Hash key 過期,或是搜尋 此筆資料是否存放在 cache 儲存區中 等工作。</li>
</ul>
<p><img src="https://i.imgur.com/4IJEZpc.jpg" alt="Ngnx Cache運作流程"></p>
<p><img src="https://i.imgur.com/Rv1KFNe.png" alt="Ngnx Cache Manager"></p>
<h1 id="Nginx-Fastcgi-Cache-簡要參數說明"><a href="#Nginx-Fastcgi-Cache-簡要參數說明" class="headerlink" title="Nginx Fastcgi Cache 簡要參數說明"></a>Nginx Fastcgi Cache 簡要參數說明</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">....</span><br><span class="line">fastcgi_cache_path &#x2F;dev&#x2F;shm&#x2F;fastcgicache levels&#x3D;1:2 keys_zone&#x3D;democache:10m  max_size&#x3D;1000m inactive&#x3D;60s;</span><br><span class="line">server &#123;</span><br><span class="line">...</span><br><span class="line">        location ~  ^&#x2F;other_sport&#x2F;A0017_0050&#x2F;(.*) &#123;</span><br><span class="line">                access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;localhost-demo_cache-access.log  main;</span><br><span class="line">                error_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;localhost-demo_cache-error.log;</span><br><span class="line">                try_files       $uri    $uri&#x2F;  &#x3D;404;</span><br><span class="line">                fastcgi_pass    127.0.0.1:9001;</span><br><span class="line">                fastcgi_index   index.php;</span><br><span class="line">                include         fastcgi_params;</span><br><span class="line">                set $prefix_fastcgi_name  $1;</span><br><span class="line">                if ($query_string !&#x3D; &quot;&quot;)&#123; set $prefix_fastcgi_name $1?$query_string;&#125;</span><br><span class="line">                </span><br><span class="line">                include     &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;skip_cache_new;</span><br><span class="line">                fastcgi_cache_key &quot;$scheme$request_method$host$request_uri&quot;;</span><br><span class="line">                fastcgi_cache_use_stale error timeout invalid_header http_500;</span><br><span class="line">                fastcgi_ignore_headers Cache-Control Expires Set-Cookie;</span><br><span class="line">                </span><br><span class="line">                fastcgi_cache_bypass $skip_cache;</span><br><span class="line">                fastcgi_no_cache $skip_cache;</span><br><span class="line">                fastcgi_cache democache;</span><br><span class="line">                fastcgi_cache_valid  1m;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">    location &#x2F;123.html &#123;</span><br><span class="line">        internal;</span><br><span class="line">        set  $memc_cmd $arg_cmd;</span><br><span class="line">        set $memc_key  $arg_key;</span><br><span class="line">        memc_pass 127.0.0.1:11211;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="fastcgi-cache-path"><a href="#fastcgi-cache-path" class="headerlink" title="fastcgi_cache_path"></a>fastcgi_cache_path</h3><ul>
<li><p>/dev/shm/fastcgicache   <strong>儲存cache的地方</strong> </p>
</li>
<li><p>levels=1:2              <strong>設定目錄階層</strong></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;dev&#x2F;shm&#x2F;fastcgicache</span><br><span class="line">|-- 1</span><br><span class="line">|   &#96;-- a7</span><br><span class="line">|       &#96;-- a5225f331f10bbe6099bfe0e48e82a71</span><br><span class="line">|-- 6</span><br><span class="line">|   &#96;-- 8f</span><br><span class="line">&#96;-- a</span><br><span class="line">    &#96;-- fe</span><br></pre></td></tr></table></figure>

<ul>
<li><p>keys_zone=democache:10m                               **為cache 空間設定名字為 democache , 此空間10MB  **</p>
</li>
<li><p>10MB 是儲存在 share memory,,比較常存取(hot data)會被儲存在share memory</p>
</li>
<li><p>max_size=1000m                                         <strong>最大使用1G空間 ,是指定儲存cache的容量</strong></p>
</li>
<li><p>inactive=60s                                          <strong>cache 1分鐘,預設值10分鐘</strong></p>
</li>
</ul>
<h3 id="fastcgi-cache-key"><a href="#fastcgi-cache-key" class="headerlink" title="fastcgi_cache_key"></a>fastcgi_cache_key</h3><ul>
<li><p>將 “$scheme$request_method$host$request_uri” 用MD5方法來 當作 hash key</p>
<h3 id="fastcgi-cache"><a href="#fastcgi-cache" class="headerlink" title="fastcgi_cache"></a>fastcgi_cache</h3></li>
<li><p>指定 key_zone 名字為 democache</p>
</li>
<li><p>參數: inactive  ,指在一段時間內文件沒被存取使用,就會被緩存管理器自動刪除。 ,預設 10m(10分鐘)</p>
</li>
</ul>
<h3 id="fastcgi-cache-valid"><a href="#fastcgi-cache-valid" class="headerlink" title="fastcgi_cache_valid"></a>fastcgi_cache_valid</h3><p>指定接收到回應程式 的 http code 快取時間</p>
<ul>
<li><p>fastcgi_cache_valid [http code …] time;</p>
</li>
<li><p>若只有指定時間。預設只有 http code  :200, 301, and 302 等回應狀態會被快取<br>ex: 當Nginx 收到回應程式 http 狀態碼 200 時,就快取 1 小時</p>
<h3 id="fastcgi-cache-use-stale"><a href="#fastcgi-cache-use-stale" class="headerlink" title="fastcgi_cache_use_stale"></a>fastcgi_cache_use_stale</h3></li>
<li><p>定義那些情況使用過期cache</p>
</li>
<li><p>invalid_header  無效的回應</p>
</li>
<li><p>error           回應的Header 發生錯誤</p>
</li>
<li><p>http_500        回應500錯誤</p>
</li>
<li><p>time            當Nginx 與 Application 建立連接時,Nginx 等待 Application 回應超時</p>
</li>
</ul>
<h3 id="fastcgi-ignore-headers"><a href="#fastcgi-ignore-headers" class="headerlink" title="fastcgi_ignore_headers"></a>fastcgi_ignore_headers</h3><ul>
<li><p>忽略 Http header 帶有 Cache-Control , Expires ,Set-Cookie </p>
</li>
<li><p>若從後端 Application回應 http header 帶有Cache-Control , Expires ,Set-Cookie 會影響fastcgi_cache 不會cache 回應資料</p>
</li>
</ul>
<h3 id="fastcgi-no-cache"><a href="#fastcgi-no-cache" class="headerlink" title="fastcgi_no_cache"></a>fastcgi_no_cache</h3><ul>
<li><p>不等於空值 及 值不等於 0 都不被 cache。 <strong>只要是 0 或 空值 就指定 cache</strong></p>
<h3 id="fastcgi-cache-bypass"><a href="#fastcgi-cache-bypass" class="headerlink" title="fastcgi_cache_bypass"></a>fastcgi_cache_bypass</h3></li>
<li><p>不等於空值 及 值不等於 0 ,即是 不從cache區 回應資料給Client端,而是 By_Pass 到後端 。 <strong>只要是 0 或 空值 就指定 cache</strong></p>
</li>
</ul>
<h2 id="upstream-cache-status-包含以下幾種狀態"><a href="#upstream-cache-status-包含以下幾種狀態" class="headerlink" title="$upstream_cache_status 包含以下幾種狀態"></a>$upstream_cache_status 包含以下幾種狀態</h2><table>
<thead>
<tr>
<th>狀態</th>
<th align="center">說明</th>
</tr>
</thead>
<tbody><tr>
<td>MISS</td>
<td align="center">未命中，請求被傳送到後端</td>
</tr>
<tr>
<td>HIT</td>
<td align="center">緩存命中</td>
</tr>
<tr>
<td>EXPIRED</td>
<td align="center">緩存已經過期請求被傳送到後端</td>
</tr>
<tr>
<td>UPDATING</td>
<td align="center">正在更新緩存，將使用舊的應答</td>
</tr>
<tr>
<td>STALE</td>
<td align="center">後端將得到過期的應答</td>
</tr>
<tr>
<td>BYPASS</td>
<td align="center">request會By_Pass到後端伺服器上,因為請求匹配了一個proxy_cache_bypass 或是 fastcgi_cache_bypass</td>
</tr>
</tbody></table>
<h1 id="執行Nginx-lua-之前-需要了解的一些事"><a href="#執行Nginx-lua-之前-需要了解的一些事" class="headerlink" title="執行Nginx + lua 之前 需要了解的一些事"></a>執行Nginx + lua 之前 需要了解的一些事</h1><h3 id="載入-lua-模組-測試是否可以運作"><a href="#載入-lua-模組-測試是否可以運作" class="headerlink" title="載入 lua 模組, 測試是否可以運作"></a>載入 lua 模組, 測試是否可以運作</h3><p>  1-1.</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dso&#123;</span><br><span class="line">            path &#x2F;etc&#x2F;nginx&#x2F;modules&#x2F;;</span><br><span class="line">            load ngx_http_lua_module.so;</span><br><span class="line">   &#125;</span><br><span class="line">http&#123;</span><br><span class="line">      .....</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

   <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">/etc/init.d/nginx reload</span><br></pre></td></tr></table></figure>

<p>   驗證lua 模組是否有載入</p>
   <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nginx -m</span><br></pre></td></tr></table></figure>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">ngx_http_lua_module (shared, 3.1)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>  1-2. 測試 lua 模組是否可用</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">        ....</span><br><span class="line">        server&#123;</span><br><span class="line">        ....</span><br><span class="line">        location &#x2F;lua3&#123;</span><br><span class="line">                default_type text&#x2F;html;</span><br><span class="line">                set $RRR I come from Taiwan;</span><br><span class="line">                content_by_lua &#39;ngx.say(&quot;&lt;h1&gt;&lt;a href&#x3D;http:&#x2F;&#x2F;tw.yahoo.com&gt;&quot;,ngx.var.RRR,&quot;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;&quot;)&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">        .....</span><br><span class="line">        &#125;</span><br><span class="line">..</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Nginx-hander處理模組將-http-request-劃分11個階段來處理-及了解每個階段執行順序。"><a href="#Nginx-hander處理模組將-http-request-劃分11個階段來處理-及了解每個階段執行順序。" class="headerlink" title="Nginx hander處理模組將 http request 劃分11個階段來處理,及了解每個階段執行順序。"></a>Nginx hander處理模組將 http request 劃分11個階段來處理,及了解每個階段執行順序。</h3><p> 2-1. </p>
<ul>
<li><p>先由Nginx核心 讀取 http Header</p>
</li>
<li><p>根據Nginx設定檔,Nginx 核心 挑選一個Hander模組 處理 Http 請求 ,並將 http Header 交給 Hander 模組</p>
</li>
<li><p>由Hander 模組 讀取 Http Body ,並處理好 Http 請求</p>
</li>
<li><p>Hander 模組處理Http 請求後,再 發送給 Fliters 模組處理。</p>
</li>
<li><p>Fliter 模組處理好後,再發送給客戶端<br><img src="https://i.imgur.com/YvTfiih.png" alt="Http請求處理流程圖"></p>
</li>
</ul>
<p> 2-2. Handers模組 精細處理 Http 請求 ,分成 11 個階段處理。下表所列處理階段分別依序處理</p>
<table>
<thead>
<tr>
<th>Handers階段</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>NGX_HTTP_POST_READ_PHAS</td>
<td>讀取請求內容階段</td>
</tr>
<tr>
<td>NGX_HTTP_SERVER_REWRITE_PHASE</td>
<td>Server請求位址重寫階段</td>
</tr>
<tr>
<td>NGX_HTTP_FIND_CONFIG_PHASE</td>
<td>配置查找階段:</td>
</tr>
<tr>
<td>NGX_HTTP_REWRITE_PHASE</td>
<td>Location請求位址重寫階段</td>
</tr>
<tr>
<td>NGX_HTTP_POST_REWRITE_PHASE</td>
<td>請求位址重寫提交階段</td>
</tr>
<tr>
<td>NGX_HTTP_PREACCESS_PHASE</td>
<td>訪問許可權檢查準備階段</td>
</tr>
<tr>
<td>NGX_HTTP_ACCESS_PHASE</td>
<td>訪問許可權檢查階段</td>
</tr>
<tr>
<td>NGX_HTTP_POST_ACCESS_PHASE</td>
<td>訪問許可權檢查提交階段</td>
</tr>
<tr>
<td>NGX_HTTP_TRY_FILES_PHASE</td>
<td>配置項try_files處理階段</td>
</tr>
<tr>
<td>NGX_HTTP_CONTENT_PHASE</td>
<td>內容產生階段</td>
</tr>
<tr>
<td>NGX_HTTP_LOG_PHASE</td>
<td>日誌模組處理階段</td>
</tr>
</tbody></table>
<h1 id="ngx-http-memc-module-so-模組"><a href="#ngx-http-memc-module-so-模組" class="headerlink" title="ngx_http_memc_module.so 模組"></a>ngx_http_memc_module.so 模組</h1><p>使Nginx  能利用 memcached 相關指令 (set ,get ,stat..等等)存取memcached server</p>
<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /use/<span class="built_in">local</span>/src;git <span class="built_in">clone</span> https://github.com/openresty/memc-nginx-module.git</span><br><span class="line">dso_tool --dst=/etc/nginx/modules/ --add-module=/usr/<span class="built_in">local</span>/src/memc-nginx-module/</span><br></pre></td></tr></table></figure>

<h2 id="修改設定檔-載入此模組-etc-nginx-modules-ngx-http-memc-module-so"><a href="#修改設定檔-載入此模組-etc-nginx-modules-ngx-http-memc-module-so" class="headerlink" title="修改設定檔 ,載入此模組 (/etc/nginx/modules/ngx_http_memc_module.so )"></a>修改設定檔 ,載入此模組 (/etc/nginx/modules/ngx_http_memc_module.so )</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dso &#123;</span><br><span class="line"> ....</span><br><span class="line">      load ngx_http_memc_module.so;</span><br><span class="line">&#125;</span><br><span class="line">http&#123;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nginx -t &amp;&amp; /etc/init.d/nginx reload</span><br></pre></td></tr></table></figure>
<h2 id="Nginx-access-memcached"><a href="#Nginx-access-memcached" class="headerlink" title="Nginx access memcached"></a>Nginx access memcached</h2><ul>
<li>先啟動 memcached ,並插入一些資料 ,這邊測試,插入 andy 和 amy</li>
</ul>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Google&quot;</span> &gt; andy</span><br><span class="line"><span class="built_in">echo</span>  <span class="string">&quot;Good&quot;</span>  &gt; amy</span><br><span class="line">memcp --verbose --debug --servers=127.0.0.1 --expire=120  andy</span><br><span class="line">memcp --verbose --debug --servers=127.0.0.1 --expire=120  amy</span><br></pre></td></tr></table></figure>

<ul>
<li>測試抓取 andy , amy  key 的值 </li>
</ul>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl <span class="string">&#x27;http://192.168.0.3/memt.html?cmd=get&amp;key=andy&#x27;</span></span><br><span class="line">curl <span class="string">&#x27;http://192.168.0.3/memt.html?cmd=get&amp;key=amy&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>為了能安全取得 memcached key 值</p>
<p>可以不要讓外部直接利用Nginx  存取 memcached Server,需要修改 nginx 設定檔</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">  ...</span><br><span class="line">  server &#123;</span><br><span class="line">      location &#x2F;memt.html &#123;</span><br><span class="line">              internal;</span><br><span class="line">              set  $memc_cmd $arg_cmd;</span><br><span class="line">              set $memc_key  $arg_key;</span><br><span class="line">              memc_pass 127.0.0.1:11211;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>測試 </p>
<p>目標結果 : 404 沒找到</p>
</li>
</ul>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl <span class="string">&#x27;http://192.168.0.3/memt.html?cmd=get&amp;key=andy&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="自行撰寫lua流程說明"><a href="#自行撰寫lua流程說明" class="headerlink" title="自行撰寫lua流程說明"></a>自行撰寫lua流程說明</h1><ul>
<li><p>先判斷是否有 帶 cookie ; 若沒帶 則 By_Pass 後端php-cgi處理</p>
</li>
<li><p>再確定 cookie 是否有帶 “WEBSESSID=” 字串 ; 若沒帶 則 By_Pass 後端php-cgi處理</p>
</li>
<li><p>有帶cookie , 利用(memcached API For Nginx) 讀取 cookie值</p>
</li>
<li><p>確定cookie 值的內容 是否有帶登入資訊 ;若沒帶 則By_Pass 後端php-cgi處理</p>
</li>
<li><p>有帶登入資訊, 是否為列表要cache 的對象 ; 若不是 則By_Pass 後端php-cgi處理</p>
</li>
</ul>
<h1 id="簡單演示-及-問題說明"><a href="#簡單演示-及-問題說明" class="headerlink" title="簡單演示 及 問題說明"></a>簡單演示 及 問題說明</h1><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><h2 id="問題說明"><a href="#問題說明" class="headerlink" title="問題說明"></a>問題說明</h2><ul>
<li>說明背景:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;220.229.227.26&#x2F;other_sport&#x2F;A0017_0050&#x2F;om&#x2F; </span><br><span class="line">http:&#x2F;&#x2F;220.229.227.26&#x2F;other_sport&#x2F;A0017_0050&#x2F;wlb&#x2F;</span><br><span class="line">兩個位址都在同一個DocumentRoot &#x2F;var&#x2F;www&#x2F;html&#x2F;other_sport&#x2F;A0017_0050&#x2F;</span><br><span class="line">兩個位址都在同一個Nginx設定檔中 &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;00-default.conf</span><br></pre></td></tr></table></figure>
<ul>
<li>產生問題執行:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用Firefox 瀏覽此url 並登入 http:&#x2F;&#x2F;220.229.227.26&#x2F;other_sport&#x2F;A0017_0050&#x2F;om&#x2F;</span><br><span class="line">執行設定會被cache的url http:&#x2F;&#x2F;220.229.227.26&#x2F;other_sport&#x2F;A0017_0050&#x2F;om&#x2F;league-listing.php (看 &#x2F;var&#x2F;log&#x2F;nginx&#x2F;localhost-demo_cache-access.log 是否有hit到,有被Hit到 就馬上執行下一個步驟)</span><br><span class="line">用IE 瀏覽此url 並登入 http:&#x2F;&#x2F;220.229.227.26&#x2F;other_sport&#x2F;A0017_0050&#x2F;wlb&#x2F;</span><br><span class="line">再瀏覽此url http:&#x2F;&#x2F;220.229.227.26&#x2F;other_sport&#x2F;A0017_0050&#x2F;om&#x2F;league-listing.php,就發生未登入即可以抓取的到頁面。</span><br></pre></td></tr></table></figure>


<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><p><a href="http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html">Module ngx_http_fastcgi_module</a></p>
</li>
<li><p><a href="http://czerasz.com/2015/03/30/nginx-caching-tutorial/">Nginx Caching Tutorial - You Can Run Faster</a> </p>
</li>
<li><p><a href="http://blog.angryfox.com/?p=1930">Nginx的緩存：proxy_cache和fastcgi_cache</a></p>
</li>
<li><p><a href="https://www.cnxct.com/several-reminder-in-nginx-fastcgi_cache-and-php-session_cache_limiter/">Nginx模塊fastcgi_cache的幾個注意點</a></p>
</li>
<li><p><a href="http://281816327.blog.51cto.com/907015/1619920">Nginx模塊和請求處理流程簡介</a></p>
</li>
<li><p><a href="https://github.com/chiamingyen/nginxProject/blob/master/nginxProject/source/chapter_3.rst">handler模組的掛載</a></p>
</li>
<li><p><a href="http://www.pylist.com/topic/1445510269">nginx與lua的執行順序和步驟說明</a></p>
</li>
<li><p><a href="https://github.com/openresty/lua-nginx-module#nginx-api-for-lua">Nginx API for Lua</a></p>
</li>
<li><p><a href="http://www.pureage.info/2013/09/02/125.html">nil、null與ngx.null</a></p>
</li>
<li><p><a href="https://www.gitbook.com/book/moonbingbing/openresty-best-practices/details">OpenResty最佳實踐</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>NGINX</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS_VPC-LAB1</title>
    <url>/2021/12/29/2021-12-29-AWS_VPC-LAB1/</url>
    <content><![CDATA[<h1 id="AWS-VPC-LAB1"><a href="#AWS-VPC-LAB1" class="headerlink" title="AWS_VPC-LAB1"></a>AWS_VPC-LAB1</h1><p>本篇主要簡單建立VPC過程：如下圖</p>
<ul>
<li>建立VPC (<strong>Virtual Private Cloud</strong>)</li>
<li>建立IGW (Internet Gateway)</li>
<li>建立Routing Table</li>
<li>建立Subnet</li>
<li>將路由表與Subnet建立關聯</li>
<li>建立Security Group</li>
<li>建立EC2並測試</li>
<li>清理Lab所建立的所有元件</li>
</ul>
<p><img src="https://i.imgur.com/ysYu3ey.png" alt="AWS_VPC-Public"></p>
<h2 id="建立VPC-Virtual-Private-Cloud"><a href="#建立VPC-Virtual-Private-Cloud" class="headerlink" title="建立VPC(Virtual Private Cloud)"></a>建立VPC(<strong>Virtual Private Cloud</strong>)</h2><p>建立VPC並命名為 <strong>VPC-LAB1</strong>,並劃分一個大網段 <strong>10.1.0.0/16</strong><br><img src="https://i.imgur.com/w2iuoqO.png" alt="VPC-LAB1"></p>
<h2 id="建立-igw"><a href="#建立-igw" class="headerlink" title="建立 igw"></a>建立 igw</h2><p>建立igw 並命名為 <strong>igw-Lab</strong>,並連線到 <strong>VPC-LAB1</strong><br><img src="https://i.imgur.com/BdKKYE8.png" alt="igw-Lab0"><br><img src="https://i.imgur.com/MCZkTsP.png" alt="igw-LAb1"><br><img src="https://i.imgur.com/7BMJIsG.png" alt="igw-Lab2"></p>
<h2 id="建立Routing-Table"><a href="#建立Routing-Table" class="headerlink" title="建立Routing Table"></a>建立Routing Table</h2><ul>
<li><p>Routing Table:  <strong>AZ1-Pub-Rtable</strong></p>
<p><img src="https://i.imgur.com/Z6EGBlW.png"></p>
</li>
<li><p>編輯路由表, 新增一筆Default Route 到 igw-Lab<br><img src="https://i.imgur.com/RCS6NNm.png"></p>
<h2 id="建立Subnet"><a href="#建立Subnet" class="headerlink" title="建立Subnet"></a>建立Subnet</h2></li>
<li><p>選擇剛建立VPC :  <strong>VPC-LAB1</strong><br><img src="https://i.imgur.com/FXZtg5Z.png"></p>
</li>
<li><p>Subnet 名稱： <strong>AZ1-PubSubnet</strong></p>
<ul>
<li>選定AZ區域:  選擇日本大阪一個AZ(<strong>ap-northeast-3a</strong>)</li>
<li>分配網段:  <strong>10.1.1.0/24</strong><br><img src="https://i.imgur.com/6LDstYt.png"></li>
</ul>
</li>
</ul>
<h2 id="將路由表與Subnet建立關聯"><a href="#將路由表與Subnet建立關聯" class="headerlink" title="將路由表與Subnet建立關聯"></a>將路由表與Subnet建立關聯</h2><p><img src="https://i.imgur.com/b3dKqlC.png"></p>
<h2 id="建立Security-Group-SG"><a href="#建立Security-Group-SG" class="headerlink" title="建立Security Group(SG)"></a>建立Security Group(SG)</h2><p>建立SG 名為 <strong>AZ1_Pub_sg1</strong>,新增兩筆傳入規則</p>
<ul>
<li>任何來源 0.0.0.0/0 ,tcp port 22 都允許</li>
<li>任何來源 0.0.0.0/0 ,ICMP-IPv4  <img src="https://i.imgur.com/Yiwu5SL.png"></li>
</ul>
<blockquote>
<blockquote>
<p>AWS的 SG 是屬於<strong>StateFul</strong>,都是綁定在<strong>ENI</strong>(Elastic Network Interface: 網卡)上(相當於Linux Iptable角色);NACL 屬於 <strong>Stateless</strong>,都是綁定上 Subnet</p>
</blockquote>
</blockquote>
<h2 id="建立EC2-及測試"><a href="#建立EC2-及測試" class="headerlink" title="建立EC2 及測試"></a>建立EC2 及測試</h2><p>這邊EC2簡單建立, 只是測試VPC所建立的元件是否正確。</p>
<ul>
<li>透過public ip 使用 ssh 加上 key 的方式連進來</li>
<li>在EC2 上聯外</li>
</ul>
<p>以下圖示只要選擇 Ｎetwork: <strong>VPC-LAB1</strong> , Subnet: <strong>AZ1-PubSubnet</strong> ,Auto-assign-Public-IP: <strong>Enable</strong> (igw 會DHCP分配一個IP),其他預設即可</p>
<p><img src="https://i.imgur.com/8p0tlOL.png"></p>
<p>選擇剛建立的security group: AZ1_Pub_sg1</p>
<p><img src="https://i.imgur.com/vv5rsLh.png"></p>
<p>建立ssh-key , 主要是安全地連入EC2</p>
<p><img src="https://i.imgur.com/dMJHGvK.png"></p>
<p>建立好 EC2, 查看IGW 分配的IP</p>
<p><img src="https://i.imgur.com/gm5iCnt.png"></p>
<h3 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h3><ul>
<li>測試 連進 EC2<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -i vpc-Lab1.pem ec2-user@15.152.54.18</span><br></pre></td></tr></table></figure>
連進去後, 測試是否能聯外<br><img src="https://i.imgur.com/JzUPZls.png"></li>
</ul>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://ithelp.ithome.com.tw/articles/10262172l">Day 5 網路寶石：AWS VPC 架構 Routes &amp; Security (上) </a></li>
</ul>
]]></content>
      <tags>
        <tag>AWS</tag>
        <tag>Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS_VPC-LAB1</title>
    <url>/2021/12/31/20121-12-31-AWS_VPC-LAB1/</url>
    <content><![CDATA[<h1 id="AWS-VPC-LAB1"><a href="#AWS-VPC-LAB1" class="headerlink" title="AWS_VPC-LAB1"></a>AWS_VPC-LAB1</h1><p>本篇主要簡單建立VPC過程：如下圖</p>
<ul>
<li>建立VPC (<strong>Virtual Private Cloud</strong>)</li>
<li>建立IGW (Internet Gateway)</li>
<li>建立Routing Table</li>
<li>建立Subnet</li>
<li>將路由表與Subnet建立關聯</li>
<li>建立Security Group</li>
<li>建立EC2並測試</li>
<li>清理Lab所建立的所有元件</li>
</ul>
<p><img src="https://i.imgur.com/ysYu3ey.png" alt="AWS_VPC-Public"></p>
<h2 id="建立VPC-Virtual-Private-Cloud"><a href="#建立VPC-Virtual-Private-Cloud" class="headerlink" title="建立VPC(Virtual Private Cloud)"></a>建立VPC(<strong>Virtual Private Cloud</strong>)</h2><p>建立VPC並命名為 <strong>VPC-LAB1</strong>,並劃分一個大網段 <strong>10.1.0.0/16</strong><br><img src="https://i.imgur.com/w2iuoqO.png" alt="VPC-LAB1"></p>
<h2 id="建立-igw"><a href="#建立-igw" class="headerlink" title="建立 igw"></a>建立 igw</h2><p>建立igw 並命名為 <strong>igw-Lab</strong>,並連線到 <strong>VPC-LAB1</strong><br><img src="https://i.imgur.com/BdKKYE8.png" alt="igw-Lab0"><br><img src="https://i.imgur.com/MCZkTsP.png" alt="igw-LAb1"><br><img src="https://i.imgur.com/7BMJIsG.png" alt="igw-Lab2"></p>
<h2 id="建立Routing-Table"><a href="#建立Routing-Table" class="headerlink" title="建立Routing Table"></a>建立Routing Table</h2><ul>
<li><p>Routing Table:  <strong>AZ1-Pub-Rtable</strong></p>
<p><img src="https://i.imgur.com/Z6EGBlW.png"></p>
</li>
<li><p>編輯路由表, 新增一筆Default Route 到 igw-Lab<br><img src="https://i.imgur.com/RCS6NNm.png"></p>
<h2 id="建立Subnet"><a href="#建立Subnet" class="headerlink" title="建立Subnet"></a>建立Subnet</h2></li>
<li><p>選擇剛建立VPC :  <strong>VPC-LAB1</strong><br><img src="https://i.imgur.com/FXZtg5Z.png"></p>
</li>
<li><p>Subnet 名稱： <strong>AZ1-PubSubnet</strong></p>
<ul>
<li>選定AZ區域:  選擇日本大阪一個AZ(<strong>ap-northeast-3a</strong>)</li>
<li>分配網段:  <strong>10.1.1.0/24</strong><br><img src="https://i.imgur.com/6LDstYt.png"></li>
</ul>
</li>
</ul>
<h2 id="將路由表與Subnet建立關聯"><a href="#將路由表與Subnet建立關聯" class="headerlink" title="將路由表與Subnet建立關聯"></a>將路由表與Subnet建立關聯</h2><p><img src="https://i.imgur.com/b3dKqlC.png"></p>
<h2 id="建立Security-Group-SG"><a href="#建立Security-Group-SG" class="headerlink" title="建立Security Group(SG)"></a>建立Security Group(SG)</h2><p>建立SG 名為 <strong>AZ1_Pub_sg1</strong>,新增兩筆傳入規則</p>
<ul>
<li>任何來源 0.0.0.0/0 ,tcp port 22 都允許</li>
<li>任何來源 0.0.0.0/0 ,ICMP-IPv4  <img src="https://i.imgur.com/Yiwu5SL.png"></li>
</ul>
<blockquote>
<blockquote>
<p>AWS的 SG 是屬於<strong>StateFul</strong>,都是綁定在<strong>ENI</strong>(Elastic Network Interface: 網卡)上(相當於Linux Iptable角色);NACL 屬於 <strong>Stateless</strong>,都是綁定上 Subnet</p>
</blockquote>
</blockquote>
<h2 id="建立EC2-及測試"><a href="#建立EC2-及測試" class="headerlink" title="建立EC2 及測試"></a>建立EC2 及測試</h2><p>這邊EC2簡單建立, 只是測試VPC所建立的元件是否正確。</p>
<ul>
<li>透過public ip 使用 ssh 加上 key 的方式連進來</li>
<li>在EC2 上聯外</li>
</ul>
<p>以下圖示只要選擇 Ｎetwork: <strong>VPC-LAB1</strong> , Subnet: <strong>AZ1-PubSubnet</strong> ,Auto-assign-Public-IP: <strong>Enable</strong> (igw 會DHCP分配一個IP),其他預設即可</p>
<p><img src="https://i.imgur.com/8p0tlOL.png"></p>
<p>選擇剛建立的security group: AZ1_Pub_sg1</p>
<p><img src="https://i.imgur.com/vv5rsLh.png"></p>
<p>建立ssh-key , 主要是安全地連入EC2</p>
<p><img src="https://i.imgur.com/dMJHGvK.png"></p>
<p>建立好 EC2, 查看IGW 分配的IP</p>
<p><img src="https://i.imgur.com/gm5iCnt.png"></p>
<h3 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h3><ul>
<li>測試 連進 EC2<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -i vpc-Lab1.pem ec2-user@15.152.54.18</span><br></pre></td></tr></table></figure>
連進去後, 測試是否能聯外<br><img src="https://i.imgur.com/JzUPZls.png"></li>
</ul>
<h2 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h2><p>AWS 的價值貴於方便與彈性,使用多少算多少錢,因此這個只是個LAB ,不用時記得將他清理刪除。</p>
<ul>
<li><p>將EC2 terminated</p>
<p><img src="https://i.imgur.com/I03Ov4f.png"></p>
</li>
<li><p>將指定VPC刪除, AWS 會自動地與指定的VPC相關聯的物件都給刪掉。</p>
<p><img src="https://i.imgur.com/ZdSrygI.png"></p>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1></li>
<li><p><a href="https://ithelp.ithome.com.tw/articles/10262172l">Day 5 網路寶石：AWS VPC 架構 Routes &amp; Security (上) </a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>AWS</tag>
        <tag>Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS_VPC-LAB1_By-Terraform</title>
    <url>/2022/01/05/2022-01-05-AWS_VPC-LAB1_By-Terraform/</url>
    <content><![CDATA[<h1 id="AWS-VPC-LAB1-By-Terraform"><a href="#AWS-VPC-LAB1-By-Terraform" class="headerlink" title="AWS_VPC-LAB1  By Terraform"></a>AWS_VPC-LAB1  By Terraform</h1><p>本篇主要是利用時下流行<strong>基礎架構程式 (IaC)工具: Terraform</strong> 重新部署上一篇<a href="https://blog.utshop.tw/2021/12/31/20121-12-31-AWS_VPC-LAB1/">AWS_VPC-LAB1</a> 內容。以下步驟與上一篇一樣</p>
<ul>
<li>建立VPC (<strong>Virtual Private Cloud</strong>)</li>
<li>建立IGW (Internet Gateway)</li>
<li>建立Subnet</li>
<li>建立Routing Table</li>
<li>將路由表與Subnet建立關聯</li>
<li>建立Security Group</li>
<li>獲取AMI</li>
<li>建立EC2</li>
<li>執行 Terraform</li>
<li>測試</li>
<li>清理Lab所建立的所有元件</li>
</ul>
<p><strong>完整部署後,如下圖所示:</strong></p>
<p><img src="https://i.imgur.com/ysYu3ey.png" alt="AWS_VPC-Public"></p>
<h2 id="開始部署之前"><a href="#開始部署之前" class="headerlink" title="開始部署之前"></a>開始部署之前</h2><p>本篇不是Terraform 基礎教學,若不清楚Terraform可以看參考資料。</p>
<ul>
<li><p>安裝Terraform 很簡單可以看<a href="https://learn.hashicorp.com/tutorials/terraform/install-cli">官網-Install Terraform</a></p>
</li>
<li><p>使用AWS API之前都需要先到IAM 設定申請一組<strong>key</strong>及<strong>SECRET_ACCESS_KEY</strong></p>
<p>因為只是LAB,為了方便執行通常都會將申請好的key放置在shell script</p>
<p><strong>myauth_key.sh</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">export</span> AWS_ACCESS_KEY_ID=<span class="string">&#x27;your key id&#x27;</span></span><br><span class="line"><span class="built_in">export</span> AWS_SECRET_ACCESS_KEY=<span class="string">&#x27;your secret key&#x27;</span></span><br></pre></td></tr></table></figure>

<p>在執行任何AWS API或Terraform之前先執行 <strong>myauth_key.sh</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ./myhome-auth_key.sh</span><br></pre></td></tr></table></figure>
<h2 id="先宣告變數"><a href="#先宣告變數" class="headerlink" title="先宣告變數"></a>先宣告變數</h2><p>以下開始是Terraform hcl 語法。此節將VPC , subnet 等需要網段及登入 EC2 需要Key的名稱等參數, 用變數方式載入便於其他資源物件利用。</p>
</li>
</ul>
<p><strong>vars.tf</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">variable &quot;AWS_REGION&quot; &#123;</span><br><span class="line">  default &#x3D; &quot;ap-northeast-3&quot;</span><br><span class="line">&#125;</span><br><span class="line">variable &quot;AWS_AZ&quot; &#123;</span><br><span class="line">  default &#x3D; &quot;ap-northeast-3a&quot;</span><br><span class="line">&#125;</span><br><span class="line">variable &quot;vpc_cidr_lab0&quot; &#123;</span><br><span class="line">    default &#x3D; &quot;10.1.0.0&#x2F;16&quot;</span><br><span class="line">    description &#x3D; &quot;the vpc cidr&quot;</span><br><span class="line">&#125;</span><br><span class="line">variable &quot;public_subnet_cidr_lab0&quot; &#123;</span><br><span class="line">    default &#x3D; &quot;10.1.1.0&#x2F;24&quot;</span><br><span class="line">    description &#x3D; &quot;The cidr of the public subnet&quot;</span><br><span class="line">&#125;</span><br><span class="line">variable &quot;key_name&quot; &#123;</span><br><span class="line">    default &#x3D; &quot;my-test&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>佈建雲端 IaaS 使用Terraform 好處是它提供多樣Provider : 像是 <strong>AWS</strong>,<strong>GCP</strong>,<strong>Azure</strong>,<strong>aliyun</strong>,<strong>DigitalOcean</strong>等等<br>以下是宣告是使用AWS Provider<br><strong>provider.tf</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">provider &quot;aws&quot; &#123;</span><br><span class="line">  profile &#x3D; &quot;default&quot;</span><br><span class="line">  region  &#x3D; var.AWS_REGION</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="建立VPC-Virtual-Private-Cloud"><a href="#建立VPC-Virtual-Private-Cloud" class="headerlink" title="建立VPC(Virtual Private Cloud)"></a>建立VPC(<strong>Virtual Private Cloud</strong>)</h2><p><strong>vpc.tf</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">resource &quot;aws_vpc&quot; &quot;main&quot; &#123;</span><br><span class="line">  cidr_block &#x3D; var.vpc_cidr_lab0</span><br><span class="line">  instance_tenancy     &#x3D; &quot;default&quot;</span><br><span class="line">  enable_dns_support &#x3D; true</span><br><span class="line">  enable_dns_hostnames &#x3D; true</span><br><span class="line">  enable_classiclink   &#x3D; &quot;false&quot;</span><br><span class="line">  tags &#x3D; &#123;</span><br><span class="line">       Name &#x3D; &quot;main-simple_VPC&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="建立-igw"><a href="#建立-igw" class="headerlink" title="建立 igw"></a>建立 igw</h2><p>接續上一節 vpc.tf 內容 , 這邊只是列出建立 igw 的內容</p>
<p><strong>vpc.tf</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># igw</span><br><span class="line">resource &quot;aws_internet_gateway&quot; &quot;main-igw&quot; &#123;</span><br><span class="line">  vpc_id &#x3D; aws_vpc.main.id</span><br><span class="line">  tags &#x3D; &#123;</span><br><span class="line">       Name &#x3D; &quot;main-igw&quot;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="建立Subnet"><a href="#建立Subnet" class="headerlink" title="建立Subnet"></a>建立Subnet</h2><p><strong>subnet.tf</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Create Publi Subnet</span><br><span class="line">resource &quot;aws_subnet&quot; &quot;az1-public1-subnet&quot; &#123;</span><br><span class="line">   vpc_id &#x3D; aws_vpc.main.id</span><br><span class="line">   cidr_block &#x3D; var.public_subnet_cidr_lab0</span><br><span class="line">   availability_zone &#x3D; var.AWS_AZ</span><br><span class="line">   map_public_ip_on_launch &#x3D; &quot;true&quot;</span><br><span class="line">   tags &#x3D; &#123;</span><br><span class="line">      Name &#x3D; &quot;main-az1-public1-sunet&quot;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="建立Routing-Table"><a href="#建立Routing-Table" class="headerlink" title="建立Routing Table"></a>建立Routing Table</h2><p><strong>route.tf</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Create Route Table</span><br><span class="line">resource &quot;aws_route_table&quot; &quot;main-public-rt&quot; &#123;</span><br><span class="line">  vpc_id &#x3D; aws_vpc.main.id</span><br><span class="line">  tags &#x3D; &#123;</span><br><span class="line">      Name &#x3D; &quot;main-public-rt&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  route  &#123;</span><br><span class="line">   cidr_block &#x3D; &quot;0.0.0.0&#x2F;0&quot;</span><br><span class="line">   gateway_id &#x3D; aws_internet_gateway.main-igw.id</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="將路由表與Subnet建立關聯"><a href="#將路由表與Subnet建立關聯" class="headerlink" title="將路由表與Subnet建立關聯"></a>將路由表與Subnet建立關聯</h2><p>同樣地,接續上一節 <strong>route.tf</strong>內容,將已建立的<strong>Subnet</strong>,<strong>Routing Table</strong>等物件兩者做個關聯。</p>
<p><strong>route.tf</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># route associations public</span><br><span class="line">resource &quot;aws_route_table_association&quot; &quot;main-public-rt-az1&quot; &#123;</span><br><span class="line">   subnet_id &#x3D; aws_subnet.az1-public1-subnet.id</span><br><span class="line">   route_table_id &#x3D; aws_route_table.main-public-rt.id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="建立Security-Group-SG"><a href="#建立Security-Group-SG" class="headerlink" title="建立Security Group(SG)"></a>建立Security Group(SG)</h2><p>建立SG 名為 <strong>AZ1_Pub_sg1</strong>,新增兩筆傳入規則</p>
<ul>
<li>任何來源 0.0.0.0/0 ,tcp port 22 都允許</li>
<li>任何來源 0.0.0.0/0 ,ICMP-IPv4</li>
</ul>
<p><strong>sg.tf</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">resource &quot;aws_security_group&quot; &quot;sg&quot; &#123;</span><br><span class="line">  name &#x3D; &quot;main_sg1&quot;</span><br><span class="line">  vpc_id &#x3D; aws_vpc.main.id</span><br><span class="line">  </span><br><span class="line">  ingress &#123;</span><br><span class="line">       from_port   &#x3D; &quot;22&quot;</span><br><span class="line">       to_port     &#x3D; &quot;22&quot;</span><br><span class="line">       protocol    &#x3D; &quot;TCP&quot;</span><br><span class="line">       cidr_blocks &#x3D; [&quot;0.0.0.0&#x2F;0&quot;]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ingress &#123;</span><br><span class="line">       from_port   &#x3D; &quot;-1&quot;</span><br><span class="line">       to_port     &#x3D; &quot;-1&quot;</span><br><span class="line">       protocol    &#x3D; &quot;ICMP&quot;</span><br><span class="line">       cidr_blocks &#x3D; [&quot;0.0.0.0&#x2F;0&quot;]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  egress &#123;</span><br><span class="line">       from_port &#x3D; 0</span><br><span class="line">       to_port &#x3D; 0</span><br><span class="line">       protocol &#x3D; &quot;-1&quot;</span><br><span class="line">       cidr_blocks &#x3D; [&quot;0.0.0.0&#x2F;0&quot;]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tags &#x3D; &#123;</span><br><span class="line">       Name &#x3D; &quot;main_sg1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<blockquote>
<p>AWS的 SG 是屬於<strong>StateFul</strong>,都是綁定在<strong>ENI</strong>(Elastic Network Interface: 網卡)上(相當於Linux Iptable角色);NACL 屬於 <strong>Stateless</strong>,都是綁定上 Subnet</p>
</blockquote>
</blockquote>
<h2 id="獲取AMI"><a href="#獲取AMI" class="headerlink" title="獲取AMI"></a>獲取AMI</h2><p>使用Terraform 核心組件 <strong>Data source</strong>(若對Terraform 基礎觀念不了解的，可以看參考資料的介紹)來找尋適合 EC2 AMI</p>
<p>以下找尋AMI 條件</p>
<ul>
<li><p>amazon自己發行的</p>
</li>
<li><p>AMI 名稱開頭為 “^amzn.*”</p>
</li>
<li><p>VM-type : hvm</p>
</li>
<li><p>root-device-type: abs</p>
</li>
<li><p>最近發行的AMI</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data &quot;aws_ami&quot;  &quot;example&quot; &#123;</span><br><span class="line">    most_recent      &#x3D; true</span><br><span class="line">    owners           &#x3D; [&quot;amazon&quot;]</span><br><span class="line">    name_regex       &#x3D; &quot;^amzn.*&quot;</span><br><span class="line"></span><br><span class="line">    filter &#123;</span><br><span class="line">        name &#x3D; &quot;virtualization-type&quot;</span><br><span class="line">        values &#x3D; [&quot;hvm&quot;]</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    filter &#123;</span><br><span class="line">        name   &#x3D; &quot;root-device-type&quot;</span><br><span class="line">        values &#x3D; [&quot;ebs&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &quot;ami_id&quot; &#123;</span><br><span class="line">  value &#x3D; data.aws_ami.example.id</span><br><span class="line">  description &#x3D; &quot;demo for AMI Image ID&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &quot;IP&quot; &#123;</span><br><span class="line">  value &#x3D; aws_instance.example.public_ip</span><br><span class="line">  description &#x3D; &quot;Public IP for demo&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="建立EC2"><a href="#建立EC2" class="headerlink" title="建立EC2"></a>建立EC2</h2><p>這邊EC2簡單建立, 將已建好Subnet ,Security Group (sg) ,及透過data source 獲取AMI ID<br><strong>ec2.tf</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">resource &quot;aws_instance&quot; &quot;example&quot; &#123;</span><br><span class="line">  ami &#x3D; data.aws_ami.example.id</span><br><span class="line">  instance_type &#x3D; &quot;t2.micro&quot;</span><br><span class="line"> # the VPC subnet</span><br><span class="line">  subnet_id &#x3D; aws_subnet.az1-public1-subnet.id</span><br><span class="line"></span><br><span class="line"> # the security group</span><br><span class="line">  vpc_security_group_ids &#x3D; [aws_security_group.sg.id]</span><br><span class="line"></span><br><span class="line"> # the public SSH key</span><br><span class="line">  key_name &#x3D; var.key_name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="執行-Terraform"><a href="#執行-Terraform" class="headerlink" title="執行 Terraform"></a>執行 Terraform</h2><p>完整目錄架構如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── ec2.tf</span><br><span class="line">├── myDatasource.tf</span><br><span class="line">├── provider.tf</span><br><span class="line">├── route.tf</span><br><span class="line">├── sg.tf</span><br><span class="line">├── subnet.tf</span><br><span class="line">├── vars.tf</span><br><span class="line">└── vpc.tf</span><br></pre></td></tr></table></figure>
<p>第一次執行Terraform,需要初始化先下載對應的Provider (本篇是 AWS),完成後,於所在目錄底下有一個隱藏檔 <strong>.terraform</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">terraform init</span><br></pre></td></tr></table></figure>
<p>可以查看剛寫的 terraform 語法是否正確</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">terraform validate</span><br></pre></td></tr></table></figure>
<p>執行測試計畫,可以看所列的參數</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">terraform plan</span><br></pre></td></tr></table></figure>
<p>開始部署</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">terraform apply  -auto-approve</span><br></pre></td></tr></table></figure>

<h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><ul>
<li>透過public ip 使用 ssh 加上 key 的方式連進來</li>
<li>在EC2 上聯外</li>
</ul>
<p>執行完terraform後,會出現以下內容; 如圖</p>
<p><img src="https://i.imgur.com/R4ajbxw.png"></p>
<p>測試 連進 EC2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -i my-test.pem ec2-user@15.152.37.2</span><br></pre></td></tr></table></figure>


<h2 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h2><p>AWS 的價值貴於方便與彈性,使用多少算多少錢,因此這個只是個LAB ,不用時記得將他清理刪除。<br>使用Terraform  只要下以下指令即可清理完成。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">terraform destroy</span><br></pre></td></tr></table></figure>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://www.trendmicro.com/zh_tw/what-is/cloud-security/infrastructure-as-code.html">何謂基礎架構程式碼 (IaC) </a></li>
<li><a href="https://medium.com/@chihsuan/terraform-%E8%87%AA%E5%8B%95%E5%8C%96%E7%9A%84%E5%9F%BA%E7%A4%8E%E6%9E%B6%E6%A7%8B%E4%BB%8B%E7%B4%B9-f827e8975e98">Terraform 自動化的基礎架構介紹-chihsuan</a></li>
<li><a href="https://godleon.github.io/blog/DevOps/terraform-getting-started/">[Terraform] 入門學習筆記-小信豬的原始部落格</a></li>
<li><a href="https://www.terraform.io/docs/configuration/data-sources.html">Terraform_Data Sources</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10262172l">Day 5 網路寶石：AWS VPC 架構 Routes &amp; Security (上) </a></li>
</ul>
]]></content>
      <tags>
        <tag>AWS</tag>
        <tag>Cloud</tag>
      </tags>
  </entry>
</search>
